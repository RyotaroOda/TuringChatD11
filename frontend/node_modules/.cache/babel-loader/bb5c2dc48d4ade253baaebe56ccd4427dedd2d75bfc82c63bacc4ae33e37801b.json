{"ast":null,"code":"import { ref, push, onValue, remove } from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\n\n// ルームのデータを監視\nexport const onRoomUpdate = (roomId, callback) => {\n  const roomRef = ref(db, `rooms/${roomId}`);\n  onValue(roomRef, snapshot => {\n    const roomData = snapshot.val();\n    if (roomData) {\n      callback(roomData); // データがある場合はコールバックを呼び出す\n    } else {\n      console.error(\"ルームが存在しません。\");\n    }\n  }, error => {\n    console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n  });\n};\n\n// // マッチングリクエストを行う関数\n// export const requestMatch = async () => {\n//   const user = auth.currentUser;\n//   if (!user) {\n//     throw new Error(\"ログインしていないユーザーです。\");\n//   }\n\n//   const playerId = user.uid;\n//   const playerRating = Math.floor(Math.random() * 1000); // 仮のレーティングを生成（本番ではユーザーの実際のスキルに基づく）\n\n//   // プレイヤー情報を待機中のプレイヤーリストに追加\n//   const playerData = {\n//     id: playerId,\n//     rating: playerRating,\n//     timeWaiting: Date.now(),\n//   };\n\n//   const waitingPlayersRef = ref(db, \"waitingPlayers/\" + playerId);\n//   await set(waitingPlayersRef, playerData);\n\n//   console.log(\"プレイヤーを待機リストに追加しました。プレイヤーID:\", playerId);\n// };\n\n// マッチングが成立したらコールバックを実行するリスナー\nexport const onMatchFound = callback => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const playerId = user.uid;\n  const playerRef = ref(db, \"players/\" + playerId + \"/match\");\n\n  // プレイヤーのマッチング情報を監視\n  onValue(playerRef, snapshot => {\n    const matchData = snapshot.val();\n    if (matchData) {\n      callback(matchData); // マッチングが見つかればコールバックを実行\n    }\n  });\n};\n\n// メッセージを送信する関数\nexport const sendMessage = async (roomId, message) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const messageRef = ref(db, `rooms/${roomId}/messages`);\n  const messageData = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now()\n  };\n  await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\");\n};\n\n// バトルログの更新を監視するリスナー\nexport const onTurnUpdated = (roomId, callback) => {\n  const battleLogRef = ref(db, `rooms/${roomId}/battleLog`);\n\n  // バトルログの更新をリアルタイムで監視\n  onValue(battleLogRef, snapshot => {\n    const battleLogData = snapshot.val();\n    if (battleLogData) {\n      callback(battleLogData); // バトルログが更新されたらコールバックを実行\n    }\n  });\n};\n\n// バトル終了を監視するリスナー\nexport const onBattleEnd = (roomId, callback) => {\n  const statusRef = ref(db, `rooms/${roomId}/status`);\n\n  // バトルの終了を監視\n  onValue(statusRef, snapshot => {\n    const status = snapshot.val();\n    if (status === \"ended\") {\n      callback(); // バトルが終了したらコールバックを実行\n    }\n  });\n};\n\n// マッチング成立時、マッチングがキャンセルされた場合やリロード時にwaitingPlayersから削除する関数\nexport const removeFromWaitingList = async () => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const playerId = user.uid;\n  const playerRef = ref(db, \"waitingPlayers/\" + playerId);\n  await remove(playerRef); // 待機リストからプレイヤーを削除\n  console.log(\"プレイヤーを待機リストから削除しました。\");\n};","map":{"version":3,"names":["ref","push","onValue","remove","auth","db","onRoomUpdate","roomId","callback","roomRef","snapshot","roomData","val","console","error","onMatchFound","user","currentUser","Error","playerId","uid","playerRef","matchData","sendMessage","message","messageRef","messageData","senderId","timestamp","Date","now","log","onTurnUpdated","battleLogRef","battleLogData","onBattleEnd","statusRef","status","removeFromWaitingList"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase-realtime-database.ts"],"sourcesContent":["import { ref, push, set, update, onValue, remove } from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\n\n// ルームのデータを監視\nexport const onRoomUpdate = (\n  roomId: string,\n  callback: (roomData: any) => void\n) => {\n  const roomRef = ref(db, `rooms/${roomId}`);\n  onValue(\n    roomRef,\n    (snapshot) => {\n      const roomData = snapshot.val();\n      if (roomData) {\n        callback(roomData); // データがある場合はコールバックを呼び出す\n      } else {\n        console.error(\"ルームが存在しません。\");\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n    }\n  );\n};\n\n// // マッチングリクエストを行う関数\n// export const requestMatch = async () => {\n//   const user = auth.currentUser;\n//   if (!user) {\n//     throw new Error(\"ログインしていないユーザーです。\");\n//   }\n\n//   const playerId = user.uid;\n//   const playerRating = Math.floor(Math.random() * 1000); // 仮のレーティングを生成（本番ではユーザーの実際のスキルに基づく）\n\n//   // プレイヤー情報を待機中のプレイヤーリストに追加\n//   const playerData = {\n//     id: playerId,\n//     rating: playerRating,\n//     timeWaiting: Date.now(),\n//   };\n\n//   const waitingPlayersRef = ref(db, \"waitingPlayers/\" + playerId);\n//   await set(waitingPlayersRef, playerData);\n\n//   console.log(\"プレイヤーを待機リストに追加しました。プレイヤーID:\", playerId);\n// };\n\n// マッチングが成立したらコールバックを実行するリスナー\nexport const onMatchFound = (callback: (data: any) => void) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const playerId = user.uid;\n  const playerRef = ref(db, \"players/\" + playerId + \"/match\");\n\n  // プレイヤーのマッチング情報を監視\n  onValue(playerRef, (snapshot) => {\n    const matchData = snapshot.val();\n    if (matchData) {\n      callback(matchData); // マッチングが見つかればコールバックを実行\n    }\n  });\n};\n\n// メッセージを送信する関数\nexport const sendMessage = async (roomId: string, message: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const messageRef = ref(db, `rooms/${roomId}/messages`);\n  const messageData = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now(),\n  };\n\n  await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\");\n};\n\n// バトルログの更新を監視するリスナー\nexport const onTurnUpdated = (\n  roomId: string,\n  callback: (data: any) => void\n) => {\n  const battleLogRef = ref(db, `rooms/${roomId}/battleLog`);\n\n  // バトルログの更新をリアルタイムで監視\n  onValue(battleLogRef, (snapshot) => {\n    const battleLogData = snapshot.val();\n    if (battleLogData) {\n      callback(battleLogData); // バトルログが更新されたらコールバックを実行\n    }\n  });\n};\n\n// バトル終了を監視するリスナー\nexport const onBattleEnd = (roomId: string, callback: () => void) => {\n  const statusRef = ref(db, `rooms/${roomId}/status`);\n\n  // バトルの終了を監視\n  onValue(statusRef, (snapshot) => {\n    const status = snapshot.val();\n    if (status === \"ended\") {\n      callback(); // バトルが終了したらコールバックを実行\n    }\n  });\n};\n\n// マッチング成立時、マッチングがキャンセルされた場合やリロード時にwaitingPlayersから削除する関数\nexport const removeFromWaitingList = async () => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const playerId = user.uid;\n  const playerRef = ref(db, \"waitingPlayers/\" + playerId);\n  await remove(playerRef); // 待機リストからプレイヤーを削除\n  console.log(\"プレイヤーを待機リストから削除しました。\");\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}