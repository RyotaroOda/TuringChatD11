{"ast":null,"code":"// services/firebase-functions-client.ts\nimport{httpsCallable}from\"firebase/functions\";import{auth,functions}from\"./firebase_f.ts\";// Firebase初期化ファイルをインポート\n// サーバーレス関数を使ってマッチングリクエストを送信する関数\nexport const requestMatch=async function(player){let retryCount=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;const requestMatchFunction=httpsCallable(functions,\"requestMatchFunction\");const TIMEOUT_DURATION=60000;// 60秒待機してもマッチングしなければタイムアウト\nlet timeoutId;let attempt=0;while(attempt<retryCount){attempt+=1;try{// マッチングリクエストを送信\nconst result=await new Promise((resolve,reject)=>{timeoutId=setTimeout(()=>reject({message:\"マッチングタイムアウト\"}),TIMEOUT_DURATION);requestMatchFunction(player).then(response=>{// マッチング成功時\nclearTimeout(timeoutId);// タイムアウトをクリア\nresolve(response.data);}).catch(error=>{// マッチング失敗時\nclearTimeout(timeoutId);// タイムアウトをクリア\nreject({message:error.message});});});return result;}catch(error){console.error(`マッチングエラーまたはタイムアウト（試行${attempt}回目）:`,error);if(attempt<retryCount){// Exponential Backoff (指数バックオフ)\nawait new Promise(resolve=>setTimeout(resolve,Math.pow(2,attempt)*1000));}else{return{roomId:\"\",startBattle:false,message:`マッチングエラーまたはタイムアウト（試行${attempt}回目）:`};}}}// 再試行失敗時の結果\nreturn{roomId:\"\",startBattle:false,message:\"再試行失敗\"};};// サーバーレス関数を使ってマッチングキャンセルを行う関数\nexport const cancelRequest=async()=>{const user=auth.currentUser;if(!user){throw new Error(\"ログインしていないユーザーです。\");}const cancelMatchFunction=httpsCallable(functions,\"cancelMatchFunction\");await cancelMatchFunction();};","map":{"version":3,"names":["httpsCallable","auth","functions","requestMatch","player","retryCount","arguments","length","undefined","requestMatchFunction","TIMEOUT_DURATION","timeoutId","attempt","result","Promise","resolve","reject","setTimeout","message","then","response","clearTimeout","data","catch","error","console","Math","pow","roomId","startBattle","cancelRequest","user","currentUser","Error","cancelMatchFunction"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase-functions-client.ts"],"sourcesContent":["// services/firebase-functions-client.ts\nimport { httpsCallable } from \"firebase/functions\";\nimport { auth, functions } from \"./firebase_f.ts\"; // Firebase初期化ファイルをインポート\nimport { PlayerData, MatchResult } from \"shared/dist/types\";\n\n// サーバーレス関数を使ってマッチングリクエストを送信する関数\nexport const requestMatch = async (\n  player: PlayerData,\n  retryCount = 3\n): Promise<MatchResult> => {\n  const requestMatchFunction = httpsCallable(functions, \"requestMatchFunction\");\n\n  const TIMEOUT_DURATION = 60000; // 60秒待機してもマッチングしなければタイムアウト\n  let timeoutId;\n  let attempt = 0;\n\n  while (attempt < retryCount) {\n    attempt += 1;\n    try {\n      // マッチングリクエストを送信\n      const result: MatchResult = await new Promise((resolve, reject) => {\n        timeoutId = setTimeout(\n          () => reject({ message: \"マッチングタイムアウト\" }),\n          TIMEOUT_DURATION\n        );\n        requestMatchFunction(player)\n          .then((response) => {\n            // マッチング成功時\n            clearTimeout(timeoutId); // タイムアウトをクリア\n            resolve(response.data as MatchResult);\n          })\n          .catch((error) => {\n            // マッチング失敗時\n            clearTimeout(timeoutId); // タイムアウトをクリア\n            reject({ message: error.message });\n          });\n      });\n      return result;\n    } catch (error) {\n      console.error(\n        `マッチングエラーまたはタイムアウト（試行${attempt}回目）:`,\n        error\n      );\n      if (attempt < retryCount) {\n        // Exponential Backoff (指数バックオフ)\n        await new Promise((resolve) =>\n          setTimeout(resolve, Math.pow(2, attempt) * 1000)\n        );\n      } else {\n        return {\n          roomId: \"\",\n          startBattle: false,\n          message: `マッチングエラーまたはタイムアウト（試行${attempt}回目）:`,\n        };\n      }\n    }\n  }\n  // 再試行失敗時の結果\n  return {\n    roomId: \"\",\n    startBattle: false,\n    message: \"再試行失敗\",\n  };\n};\n\n// サーバーレス関数を使ってマッチングキャンセルを行う関数\nexport const cancelRequest = async () => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const cancelMatchFunction = httpsCallable(functions, \"cancelMatchFunction\");\n  await cancelMatchFunction();\n};\n"],"mappings":"AAAA;AACA,OAASA,aAAa,KAAQ,oBAAoB,CAClD,OAASC,IAAI,CAAEC,SAAS,KAAQ,iBAAiB,CAAE;AAGnD;AACA,MAAO,MAAM,CAAAC,YAAY,CAAG,cAAAA,CAC1BC,MAAkB,CAEO,IADzB,CAAAC,UAAU,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAEd,KAAM,CAAAG,oBAAoB,CAAGT,aAAa,CAACE,SAAS,CAAE,sBAAsB,CAAC,CAE7E,KAAM,CAAAQ,gBAAgB,CAAG,KAAK,CAAE;AAChC,GAAI,CAAAC,SAAS,CACb,GAAI,CAAAC,OAAO,CAAG,CAAC,CAEf,MAAOA,OAAO,CAAGP,UAAU,CAAE,CAC3BO,OAAO,EAAI,CAAC,CACZ,GAAI,CACF;AACA,KAAM,CAAAC,MAAmB,CAAG,KAAM,IAAI,CAAAC,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,GAAK,CACjEL,SAAS,CAAGM,UAAU,CACpB,IAAMD,MAAM,CAAC,CAAEE,OAAO,CAAE,aAAc,CAAC,CAAC,CACxCR,gBACF,CAAC,CACDD,oBAAoB,CAACL,MAAM,CAAC,CACzBe,IAAI,CAAEC,QAAQ,EAAK,CAClB;AACAC,YAAY,CAACV,SAAS,CAAC,CAAE;AACzBI,OAAO,CAACK,QAAQ,CAACE,IAAmB,CAAC,CACvC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,EAAK,CAChB;AACAH,YAAY,CAACV,SAAS,CAAC,CAAE;AACzBK,MAAM,CAAC,CAAEE,OAAO,CAAEM,KAAK,CAACN,OAAQ,CAAC,CAAC,CACpC,CAAC,CAAC,CACN,CAAC,CAAC,CACF,MAAO,CAAAL,MAAM,CACf,CAAE,MAAOW,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CACX,uBAAuBZ,OAAO,MAAM,CACpCY,KACF,CAAC,CACD,GAAIZ,OAAO,CAAGP,UAAU,CAAE,CACxB;AACA,KAAM,IAAI,CAAAS,OAAO,CAAEC,OAAO,EACxBE,UAAU,CAACF,OAAO,CAAEW,IAAI,CAACC,GAAG,CAAC,CAAC,CAAEf,OAAO,CAAC,CAAG,IAAI,CACjD,CAAC,CACH,CAAC,IAAM,CACL,MAAO,CACLgB,MAAM,CAAE,EAAE,CACVC,WAAW,CAAE,KAAK,CAClBX,OAAO,CAAE,uBAAuBN,OAAO,MACzC,CAAC,CACH,CACF,CACF,CACA;AACA,MAAO,CACLgB,MAAM,CAAE,EAAE,CACVC,WAAW,CAAE,KAAK,CAClBX,OAAO,CAAE,OACX,CAAC,CACH,CAAC,CAED;AACA,MAAO,MAAM,CAAAY,aAAa,CAAG,KAAAA,CAAA,GAAY,CACvC,KAAM,CAAAC,IAAI,CAAG9B,IAAI,CAAC+B,WAAW,CAC7B,GAAI,CAACD,IAAI,CAAE,CACT,KAAM,IAAI,CAAAE,KAAK,CAAC,kBAAkB,CAAC,CACrC,CAEA,KAAM,CAAAC,mBAAmB,CAAGlC,aAAa,CAACE,SAAS,CAAE,qBAAqB,CAAC,CAC3E,KAAM,CAAAgC,mBAAmB,CAAC,CAAC,CAC7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}