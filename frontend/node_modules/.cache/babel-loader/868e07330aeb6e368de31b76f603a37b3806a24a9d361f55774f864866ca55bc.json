{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getDatabase } from \"firebase/database\";\nimport { getAuth, signInAnonymously } from \"firebase/auth\";\nimport { getFunctions, connectFunctionsEmulator, httpsCallable } from \"firebase/functions\";\n\n// フロントエンド用にREACT_APP_プレフィックスをつけた環境変数を使う\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID\n};\n\n// Firebaseアプリを初期化\nconst app = initializeApp(firebaseConfig);\n\n// Realtime Databaseインスタンスを作成\nexport const db = getDatabase(app);\n\n// Firebase Authenticationのインスタンスを作成\nexport const auth = getAuth(app);\nexport const functions = getFunctions(app);\n\n// 匿名認証を行う関数\nexport const signInAnonymouslyUser = () => {\n  return signInAnonymously(auth).then(userCredential => {\n    // 認証に成功した場合の処理\n    console.log(\"Signed in anonymously:\", userCredential.user);\n  }).catch(error => {\n    // 認証に失敗した場合の処理\n    console.error(\"Anonymous sign-in failed:\", error);\n  });\n};\n\n// ローカル開発用エミュレーターの接続設定\nif (window.location.hostname === \"localhost\") {\n  // Functionsエミュレーター\n  connectFunctionsEmulator(functions, \"localhost\", 5001); // ポートはエミュレータのポートに合わせる\n  console.log(\"Functions emulator connected\", functions);\n  const testFunction = httpsCallable(functions, \"testFunction\");\n  testFunction().then(result => {\n    console.log(\"testFunction result\", result);\n  }).catch(error => {\n    console.error(\"testFunction error\", error);\n  });\n  console.log(\"testFunction fin\");\n}","map":{"version":3,"names":["initializeApp","getDatabase","getAuth","signInAnonymously","getFunctions","connectFunctionsEmulator","httpsCallable","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","app","db","auth","functions","signInAnonymouslyUser","then","userCredential","console","log","user","catch","error","window","location","hostname","testFunction","result"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase_f.ts"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { getDatabase } from \"firebase/database\";\nimport { getAuth, signInAnonymously } from \"firebase/auth\";\nimport {\n  getFunctions,\n  connectFunctionsEmulator,\n  httpsCallable,\n} from \"firebase/functions\";\n\n// フロントエンド用にREACT_APP_プレフィックスをつけた環境変数を使う\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n};\n\n// Firebaseアプリを初期化\nconst app = initializeApp(firebaseConfig);\n\n// Realtime Databaseインスタンスを作成\nexport const db = getDatabase(app);\n\n// Firebase Authenticationのインスタンスを作成\nexport const auth = getAuth(app);\n\nexport const functions = getFunctions(app);\n\n// 匿名認証を行う関数\nexport const signInAnonymouslyUser = () => {\n  return signInAnonymously(auth)\n    .then((userCredential) => {\n      // 認証に成功した場合の処理\n      console.log(\"Signed in anonymously:\", userCredential.user);\n    })\n    .catch((error) => {\n      // 認証に失敗した場合の処理\n      console.error(\"Anonymous sign-in failed:\", error);\n    });\n};\n\n// ローカル開発用エミュレーターの接続設定\nif (window.location.hostname === \"localhost\") {\n  // Functionsエミュレーター\n  connectFunctionsEmulator(functions, \"localhost\", 5001); // ポートはエミュレータのポートに合わせる\n  console.log(\"Functions emulator connected\", functions);\n\n  const testFunction = httpsCallable(functions, \"testFunction\");\n  testFunction()\n    .then((result) => {\n      console.log(\"testFunction result\", result);\n    })\n    .catch((error) => {\n      console.error(\"testFunction error\", error);\n    });\n  console.log(\"testFunction fin\");\n}\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,cAAc;AAC5C,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,OAAO,EAAEC,iBAAiB,QAAQ,eAAe;AAC1D,SACEC,YAAY,EACZC,wBAAwB,EACxBC,aAAa,QACR,oBAAoB;;AAE3B;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,0BAA0B;EAC9CC,UAAU,EAAEH,OAAO,CAACC,GAAG,CAACG,8BAA8B;EACtDC,WAAW,EAAEL,OAAO,CAACC,GAAG,CAACK,+BAA+B;EACxDC,SAAS,EAAEP,OAAO,CAACC,GAAG,CAACO,6BAA6B;EACpDC,aAAa,EAAET,OAAO,CAACC,GAAG,CAACS,iCAAiC;EAC5DC,iBAAiB,EAAEX,OAAO,CAACC,GAAG,CAACW,sCAAsC;EACrEC,KAAK,EAAEb,OAAO,CAACC,GAAG,CAACa;AACrB,CAAC;;AAED;AACA,MAAMC,GAAG,GAAGxB,aAAa,CAACO,cAAc,CAAC;;AAEzC;AACA,OAAO,MAAMkB,EAAE,GAAGxB,WAAW,CAACuB,GAAG,CAAC;;AAElC;AACA,OAAO,MAAME,IAAI,GAAGxB,OAAO,CAACsB,GAAG,CAAC;AAEhC,OAAO,MAAMG,SAAS,GAAGvB,YAAY,CAACoB,GAAG,CAAC;;AAE1C;AACA,OAAO,MAAMI,qBAAqB,GAAGA,CAAA,KAAM;EACzC,OAAOzB,iBAAiB,CAACuB,IAAI,CAAC,CAC3BG,IAAI,CAAEC,cAAc,IAAK;IACxB;IACAC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,cAAc,CAACG,IAAI,CAAC;EAC5D,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;IAChB;IACAJ,OAAO,CAACI,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;EACnD,CAAC,CAAC;AACN,CAAC;;AAED;AACA,IAAIC,MAAM,CAACC,QAAQ,CAACC,QAAQ,KAAK,WAAW,EAAE;EAC5C;EACAjC,wBAAwB,CAACsB,SAAS,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;EACxDI,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEL,SAAS,CAAC;EAEtD,MAAMY,YAAY,GAAGjC,aAAa,CAACqB,SAAS,EAAE,cAAc,CAAC;EAC7DY,YAAY,CAAC,CAAC,CACXV,IAAI,CAAEW,MAAM,IAAK;IAChBT,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEQ,MAAM,CAAC;EAC5C,CAAC,CAAC,CACDN,KAAK,CAAEC,KAAK,IAAK;IAChBJ,OAAO,CAACI,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;EAC5C,CAAC,CAAC;EACJJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}