{"ast":null,"code":"import React,{useState,useEffect,createContext,useContext}from\"react\";import{onAuthStateChanged}from\"firebase/auth\";import{auth}from\"./firebase_f.ts\";// Firebase Authインスタンスをインポート\n// 認証コンテキストの作成\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext({user:null});// 認証状態を提供するプロバイダーコンポーネント\nexport const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// 認証状態の監視\nconst unsubscribe=onAuthStateChanged(auth,user=>{setUser(user);// ログインしているユーザー情報をセット\nsetLoading(false);});// クリーンアップ\nreturn()=>unsubscribe();},[]);if(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"});}return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user},children:children});};// カスタムフック useAuth の実装\nexport const useAuth=()=>{return useContext(AuthContext);// コンテキストから認証情報を取得\n};","map":{"version":3,"names":["React","useState","useEffect","createContext","useContext","onAuthStateChanged","auth","jsx","_jsx","AuthContext","user","AuthProvider","_ref","children","setUser","loading","setLoading","unsubscribe","Provider","value","useAuth"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/useAuth.tsx"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext } from \"react\";\nimport { onAuthStateChanged, User } from \"firebase/auth\";\nimport { auth } from \"./firebase_f.ts\";  // Firebase Authインスタンスをインポート\n\n// 認証コンテキストの作成\nconst AuthContext = createContext<{ user: User | null }>({ user: null });\n\n// 認証状態を提供するプロバイダーコンポーネント\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // 認証状態の監視\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      setUser(user);  // ログインしているユーザー情報をセット\n      setLoading(false);\n    });\n\n    // クリーンアップ\n    return () => unsubscribe();\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return <AuthContext.Provider value={{ user }}>{children}</AuthContext.Provider>;\n};\n\n// カスタムフック useAuth の実装\nexport const useAuth = () => {\n  return useContext(AuthContext);  // コンテキストから認証情報を取得\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,aAAa,CAAEC,UAAU,KAAQ,OAAO,CAC7E,OAASC,kBAAkB,KAAc,eAAe,CACxD,OAASC,IAAI,KAAQ,iBAAiB,CAAG;AAEzC;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAAwB,CAAEO,IAAI,CAAE,IAAK,CAAC,CAAC,CAExE;AACA,MAAO,MAAM,CAAAC,YAAqD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAChF,KAAM,CAACF,IAAI,CAAEI,OAAO,CAAC,CAAGb,QAAQ,CAAc,IAAI,CAAC,CACnD,KAAM,CAACc,OAAO,CAAEC,UAAU,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CAE5CC,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAe,WAAW,CAAGZ,kBAAkB,CAACC,IAAI,CAAGI,IAAI,EAAK,CACrDI,OAAO,CAACJ,IAAI,CAAC,CAAG;AAChBM,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAAC,CAEF;AACA,MAAO,IAAMC,WAAW,CAAC,CAAC,CAC5B,CAAC,CAAE,EAAE,CAAC,CAEN,GAAIF,OAAO,CAAE,CACX,mBAAOP,IAAA,QAAAK,QAAA,CAAK,YAAU,CAAK,CAAC,CAC9B,CAEA,mBAAOL,IAAA,CAACC,WAAW,CAACS,QAAQ,EAACC,KAAK,CAAE,CAAET,IAAK,CAAE,CAAAG,QAAA,CAAEA,QAAQ,CAAuB,CAAC,CACjF,CAAC,CAED;AACA,MAAO,MAAM,CAAAO,OAAO,CAAGA,CAAA,GAAM,CAC3B,MAAO,CAAAhB,UAAU,CAACK,WAAW,CAAC,CAAG;AACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}