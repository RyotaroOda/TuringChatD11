{"ast":null,"code":"import { ref, push, get, onValue, remove, child } from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\n\n// ルームのデータを監視\nexport const onRoomUpdate = (roomId, callback) => {\n  const roomRef = ref(db, `rooms/${roomId}`);\n  onValue(roomRef, snapshot => {\n    const roomData = snapshot.val(); // RoomData型にキャスト\n    if (roomData) {\n      callback(roomData); // データがある場合はコールバックを呼び出す\n    } else {\n      console.error(\"ルームが存在しません。\");\n      callback(null);\n    }\n  }, error => {\n    console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n    callback(null);\n  });\n};\n\n// ルームデータを取得する関数\nexport const getRoomData = async roomId => {\n  try {\n    const dbRef = ref(db); // データベースのルートを参照\n    const snapshot = await get(child(dbRef, \"roooms/$(roomId)\"));\n    console.log(\"snapshot\", snapshot);\n    if (snapshot.exists()) {\n      const roomData = snapshot.val();\n      return roomData; // RoomData型にキャストして返す\n    } else {\n      console.error(\"ルームが存在しません\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"ルームデータの取得に失敗しました:\", error);\n    return null;\n  }\n};\n\n// メッセージを送信する関数\nexport const sendMessage = async (roomId, message) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const messageRef = ref(db, `rooms/${roomId}/messages`);\n  const messageData = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now()\n  };\n  await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\");\n};\n\n// バトルログの更新を監視するリスナー\nexport const onTurnUpdated = (roomId, callback) => {\n  const battleLogRef = ref(db, `rooms/${roomId}/battleLog`);\n\n  // バトルログの更新をリアルタイムで監視\n  onValue(battleLogRef, snapshot => {\n    const battleLogData = snapshot.val();\n    if (battleLogData) {\n      callback(battleLogData); // バトルログが更新されたらコールバックを実行\n    }\n  });\n};\n\n// バトル終了を監視するリスナー\nexport const onBattleEnd = (roomId, callback) => {\n  const statusRef = ref(db, `rooms/${roomId}/status`);\n\n  // バトルの終了を監視\n  onValue(statusRef, snapshot => {\n    const status = snapshot.val();\n    if (status === \"ended\") {\n      callback(); // バトルが終了したらコールバックを実行\n    }\n  });\n};\n\n// マッチング成立時、マッチングがキャンセルされた場合やリロード時にwaitingPlayersから削除する関数\nexport const removeFromWaitingList = async () => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const playerId = user.uid;\n  const playerRef = ref(db, \"waitingPlayers/\" + playerId);\n  await remove(playerRef); // 待機リストからプレイヤーを削除\n  console.log(\"プレイヤーを待機リストから削除しました。\");\n};","map":{"version":3,"names":["ref","push","get","onValue","remove","child","auth","db","onRoomUpdate","roomId","callback","roomRef","snapshot","roomData","val","console","error","getRoomData","dbRef","log","exists","sendMessage","message","user","currentUser","Error","messageRef","messageData","senderId","uid","timestamp","Date","now","onTurnUpdated","battleLogRef","battleLogData","onBattleEnd","statusRef","status","removeFromWaitingList","playerId","playerRef"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase-realtime-database.ts"],"sourcesContent":["import { ref, push, get, onValue, remove, child } from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\nimport { RoomData } from \"shared/dist/types\";\n\n// ルームのデータを監視\nexport const onRoomUpdate = (\n  roomId: string,\n  callback: (roomData: RoomData | null) => void\n) => {\n  const roomRef = ref(db, `rooms/${roomId}`);\n  onValue(\n    roomRef,\n    (snapshot) => {\n      const roomData = snapshot.val() as RoomData | null; // RoomData型にキャスト\n      if (roomData) {\n        callback(roomData); // データがある場合はコールバックを呼び出す\n      } else {\n        console.error(\"ルームが存在しません。\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n};\n\n// ルームデータを取得する関数\nexport const getRoomData = async (roomId: string): Promise<RoomData | null> => {\n  try {\n    const dbRef = ref(db); // データベースのルートを参照\n    const snapshot = await get(child(dbRef, \"roooms/$(roomId)\"));\n    console.log(\"snapshot\", snapshot);\n    if (snapshot.exists()) {\n      const roomData = snapshot.val();\n      return roomData as RoomData; // RoomData型にキャストして返す\n    } else {\n      console.error(\"ルームが存在しません\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"ルームデータの取得に失敗しました:\", error);\n    return null;\n  }\n};\n\n// メッセージを送信する関数\nexport const sendMessage = async (roomId: string, message: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const messageRef = ref(db, `rooms/${roomId}/messages`);\n  const messageData = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now(),\n  };\n\n  await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\");\n};\n\n// バトルログの更新を監視するリスナー\nexport const onTurnUpdated = (\n  roomId: string,\n  callback: (data: any) => void\n) => {\n  const battleLogRef = ref(db, `rooms/${roomId}/battleLog`);\n\n  // バトルログの更新をリアルタイムで監視\n  onValue(battleLogRef, (snapshot) => {\n    const battleLogData = snapshot.val();\n    if (battleLogData) {\n      callback(battleLogData); // バトルログが更新されたらコールバックを実行\n    }\n  });\n};\n\n// バトル終了を監視するリスナー\nexport const onBattleEnd = (roomId: string, callback: () => void) => {\n  const statusRef = ref(db, `rooms/${roomId}/status`);\n\n  // バトルの終了を監視\n  onValue(statusRef, (snapshot) => {\n    const status = snapshot.val();\n    if (status === \"ended\") {\n      callback(); // バトルが終了したらコールバックを実行\n    }\n  });\n};\n\n// マッチング成立時、マッチングがキャンセルされた場合やリロード時にwaitingPlayersから削除する関数\nexport const removeFromWaitingList = async () => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const playerId = user.uid;\n  const playerRef = ref(db, \"waitingPlayers/\" + playerId);\n  await remove(playerRef); // 待機リストからプレイヤーを削除\n  console.log(\"プレイヤーを待機リストから削除しました。\");\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}