{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{Link,useLocation,useParams}from\"react-router-dom\";import{sendMessage,onMessageAdded,onBattleEnd}from\"../services/firebase-realtime-database.ts\";import{useAuth}from\"../services/useAuth.tsx\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BattleView=()=>{//#region init\nconst[isViewLoaded,setIsLoaded]=useState(false);const{roomId}=useParams();const{user}=useAuth();const myId=(user===null||user===void 0?void 0:user.uid)||\"error\";// Location and Params\nconst location=useLocation();const state=location.state.roomData;const playersKey=Object.keys(state.players);const isHost=myId===state.players[0].id;// const isHost = myId === state.players[playersKey[0]].id;\nconst myData=isHost?state.players[playersKey[0]]:state.players[playersKey[1]];const opponentData=isHost?state.players[playersKey[1]]:state.players[playersKey[0]];// Player Information\nconst myName=`${myData.name} (あなた)`||\"error\";// Battle Configuration\nconst battleConfig=state.battleConfig;const[remainingTime,setRemainingTime]=useState(battleConfig.oneTurnTime);//#endregion\nuseEffect(()=>{console.log(\"battle view load complete\",isHost);setIsLoaded(true);},[battleConfig]);// Player names mapping\nconst playerNames={[myId]:myName,[opponentData.id]:opponentData.name};const[chatLog,setChatLog]=useState([]);const[message,setMessage]=useState(\"\");const[isMyTurn,setIsMyTurn]=useState(isHost);// Initial turn state (placeholder)\nconst[turnCount,setTurnCount]=useState(0);// ゲームの進行状況を監視する\nuseEffect(()=>{if(roomId&&isViewLoaded){// ターン更新をFirebaseから受け取る\nonMessageAdded(roomId,newMessage=>{console.log(\"onMessageAdded:\",newMessage);setIsMyTurn(!isMyTurn);setTurnCount(turnCount+1);setChatLog(prevChatLog=>[...prevChatLog,{senderId:newMessage.senderId,message:newMessage.message}]);});}},[roomId,isViewLoaded]);// バトル終了の監視\nuseEffect(()=>{if(roomId){onBattleEnd(roomId,()=>{alert(\"Battle Ended!\");});}},[roomId]);const handleSendMessage=async()=>{if(message.trim()&&isMyTurn&&roomId){setMessage(\"送信中...\");await sendMessage(roomId,message);setMessage(\"\");}};const handleFinishMatching=()=>{console.log(\"Finishing battle...\");// バトル終了のロジック\n};//html\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u5BFE\\u6226\\u753B\\u9762\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u30EB\\u30FC\\u30E0ID: \",roomId]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\u30C1\\u30E3\\u30C3\\u30C8\\u30ED\\u30B0\"}),/*#__PURE__*/_jsx(\"ul\",{children:chatLog.map((msg,index)=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[playerNames[msg.senderId]||\"Unknown\",\":\"]}),\" \",msg.message]},index))})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u6B8B\\u308A\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u6570: \",battleConfig.maxTurn-turnCount]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u3053\\u306E\\u30BF\\u30FC\\u30F3\\u306E\\u6B8B\\u308A\\u6642\\u9593: \",remainingTime,\"\\u79D2\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u30BF\\u30FC\\u30F3\\u30D7\\u30EC\\u30FC\\u30E4\\u30FC: \",isMyTurn?\"あなた\":\"相手\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u76F8\\u624B: \",opponentData.name]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Enter message\",value:message,onChange:e=>setMessage(e.target.value)})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSendMessage,disabled:!isMyTurn,children:isMyTurn||message===\"送信中...\"?\"送信\":\"Wait for your turn\"})]}),/*#__PURE__*/_jsx(Link,{to:\"/result\",children:/*#__PURE__*/_jsx(\"button\",{onClick:handleFinishMatching,children:\"\\u30D0\\u30C8\\u30EB\\u7D42\\u4E86\"})})]});};export default BattleView;","map":{"version":3,"names":["React","useState","useEffect","Link","useLocation","useParams","sendMessage","onMessageAdded","onBattleEnd","useAuth","jsx","_jsx","jsxs","_jsxs","BattleView","isViewLoaded","setIsLoaded","roomId","user","myId","uid","location","state","roomData","playersKey","Object","keys","players","isHost","id","myData","opponentData","myName","name","battleConfig","remainingTime","setRemainingTime","oneTurnTime","console","log","playerNames","chatLog","setChatLog","message","setMessage","isMyTurn","setIsMyTurn","turnCount","setTurnCount","newMessage","prevChatLog","senderId","alert","handleSendMessage","trim","handleFinishMatching","children","map","msg","index","maxTurn","type","placeholder","value","onChange","e","target","onClick","disabled","to"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/views/BattleView.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useLocation, useParams } from \"react-router-dom\";\nimport {\n  sendMessage,\n  onMessageAdded,\n  onBattleEnd,\n} from \"../services/firebase-realtime-database.ts\";\nimport { BattleLog, PlayerData, RoomData } from \"shared/dist/types\";\nimport { useAuth } from \"../services/useAuth.tsx\";\n\nconst BattleView: React.FC = () => {\n  //#region init\n  const [isViewLoaded, setIsLoaded] = useState<boolean>(false);\n  const { roomId } = useParams<{ roomId: string }>();\n\n  const { user } = useAuth();\n  const myId = user?.uid || \"error\";\n\n  // Location and Params\n  const location = useLocation();\n  const state: RoomData = location.state.roomData;\n  const playersKey = Object.keys(state.players);\n  const isHost = myId === state.players[0].id;\n  // const isHost = myId === state.players[playersKey[0]].id;\n\n  const myData: PlayerData = isHost\n    ? state.players[playersKey[0]]\n    : state.players[playersKey[1]];\n  const opponentData: PlayerData = isHost\n    ? state.players[playersKey[1]]\n    : state.players[playersKey[0]];\n\n  // Player Information\n  const myName = `${myData.name} (あなた)` || \"error\";\n\n  // Battle Configuration\n  const battleConfig = state.battleConfig;\n  const [remainingTime, setRemainingTime] = useState<number>(\n    battleConfig.oneTurnTime\n  );\n  //#endregion\n\n  useEffect(() => {\n    console.log(\"battle view load complete\", isHost);\n    setIsLoaded(true);\n  }, [battleConfig]);\n\n  // Player names mapping\n  const playerNames: Record<string, string> = {\n    [myId]: myName,\n    [opponentData.id]: opponentData.name,\n  };\n  const [chatLog, setChatLog] = useState<\n    { senderId: string; message: string }[]\n  >([]);\n  const [message, setMessage] = useState<string>(\"\");\n  const [isMyTurn, setIsMyTurn] = useState<boolean>(isHost); // Initial turn state (placeholder)\n  const [turnCount, setTurnCount] = useState<number>(0);\n\n  // ゲームの進行状況を監視する\n  useEffect(() => {\n    if (roomId && isViewLoaded) {\n      // ターン更新をFirebaseから受け取る\n      onMessageAdded(roomId, (newMessage) => {\n        console.log(\"onMessageAdded:\", newMessage);\n        setIsMyTurn(!isMyTurn);\n        setTurnCount(turnCount + 1);\n\n        setChatLog((prevChatLog) => [\n          ...prevChatLog,\n          { senderId: newMessage.senderId, message: newMessage.message },\n        ]);\n      });\n    }\n  }, [roomId, isViewLoaded]);\n\n  // バトル終了の監視\n  useEffect(() => {\n    if (roomId) {\n      onBattleEnd(roomId, () => {\n        alert(\"Battle Ended!\");\n      });\n    }\n  }, [roomId]);\n\n  const handleSendMessage = async () => {\n    if (message.trim() && isMyTurn && roomId) {\n      setMessage(\"送信中...\");\n      await sendMessage(roomId, message);\n      setMessage(\"\");\n    }\n  };\n\n  const handleFinishMatching = () => {\n    console.log(\"Finishing battle...\");\n    // バトル終了のロジック\n  };\n\n  //html\n  return (\n    <div>\n      <h1>対戦画面</h1>\n      <p>ルームID: {roomId}</p>\n      <div>\n        <h2>チャットログ</h2>\n        <ul>\n          {chatLog.map((msg, index) => (\n            <li key={index}>\n              <strong>{playerNames[msg.senderId] || \"Unknown\"}:</strong>{\" \"}\n              {msg.message}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <p>残りメッセージ数: {battleConfig.maxTurn - turnCount}</p>\n      <p>このターンの残り時間: {remainingTime}秒</p>\n      <p>ターンプレーヤー: {isMyTurn ? \"あなた\" : \"相手\"}</p>\n      <p>相手: {opponentData.name}</p>\n      <div>\n        <label>\n          メッセージ:\n          <input\n            type=\"text\"\n            placeholder=\"Enter message\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n        </label>\n        <button onClick={handleSendMessage} disabled={!isMyTurn}>\n          {isMyTurn || message === \"送信中...\" ? \"送信\" : \"Wait for your turn\"}\n        </button>\n      </div>\n      <Link to=\"/result\">\n        <button onClick={handleFinishMatching}>バトル終了</button>\n      </Link>\n    </div>\n  );\n};\n\nexport default BattleView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}