{"ast":null,"code":"import { ref, push, get, onValue, onChildAdded, off } from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\n\nimport { DATABASE_PATHS } from \"shared/src/database-paths.ts\";\nimport { calculateBattleResult } from \"./firebase-functions-client.ts\";\n//#region HomeView\n// プレイヤーデータを監視\nexport const onRoomPlayersUpdated = (roomId, callback, stop) => {\n  const playersRef = ref(db, DATABASE_PATHS.players(roomId));\n  const listener = onValue(playersRef, snapshot => {\n    if (stop.current) {\n      // `stop` が `true` の場合、リスナーを解除して終了\n      off(playersRef, \"value\", listener);\n      console.log(\"リスナーが解除されました\");\n      return;\n    }\n    const PlayerData = snapshot.val(); // RoomData型にキャスト\n    if (PlayerData) {\n      console.log(\"プレイヤーデータが更新されました。\", PlayerData);\n      callback(PlayerData); // データがある場合はコールバックを呼び出す\n    } else {\n      console.error(\"ルームが存在しません。\");\n      callback(null);\n    }\n  }, error => {\n    console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n    callback(null);\n  });\n  return () => {\n    console.log(\"off onRoomPlayersUpdated\");\n    off(playersRef, \"value\", listener);\n  };\n};\n\n// export const stopOnRoomPlayers = (roomId: string) => {\n//     const roomRef = ref(db, DATABASE_PATHS.rooms(roomId));\n//   off(roomRef);\n//   console.log(\"addPlayerの監視を停止しました。\");\n// };\n\n// ルームのデータを監視\nexport const onRoomUpdate = (roomId, callback, stop) => {\n  const roomRef = ref(db, DATABASE_PATHS.rooms(roomId));\n  const listener = onValue(roomRef, snapshot => {\n    if (stop.current) {\n      off(roomRef, \"value\", listener);\n      console.log(\"リスナーが解除されました111\");\n      return;\n    }\n    const roomData = snapshot.val(); // RoomData型にキャスト\n    if (roomData) {\n      console.log(\"ルームデータが更新されました。\", roomData);\n      callback(roomData); // データがある場合はコールバックを呼び出す\n    } else {\n      console.error(\"ルームが存在しません。\");\n      callback(null);\n    }\n  }, error => {\n    console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n    callback(null);\n  });\n  return () => {\n    console.log(\"リスナーが解除されました222\");\n    off(roomRef, \"value\", listener);\n  };\n};\n\n// ルームデータを取得する関数\nexport const getRoomData = async roomId => {\n  try {\n    const roomRef = ref(db, DATABASE_PATHS.rooms(roomId));\n    const snapshot = await get(roomRef);\n    if (snapshot.exists()) {\n      const roomData = snapshot.val();\n      console.log(\"ルームデータを取得しました:\", roomData);\n      return roomData; // RoomData型にキャストして返す\n    } else {\n      console.error(\"ルームが存在しません\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"ルームデータの取得に失敗しました:\", error);\n    return null;\n  }\n};\n//#endregion\n\n//#region BattleView\n\n//#region メッセージ\n// メッセージを送信する関数\nexport const sendMessage = async (roomId, message) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const messageRef = ref(db, DATABASE_PATHS.messages(roomId));\n  console.log(\"メッセージ:\", message);\n  const messageData = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now()\n  };\n  https: await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\", messageData);\n};\nexport const onMessageAdded = (roomId, callback) => {\n  // メッセージリストの参照\n  const messagesRef = ref(db, DATABASE_PATHS.messages(roomId));\n\n  // メッセージが追加されたときの監視\n  onChildAdded(messagesRef, snapshot => {\n    const newMessage = snapshot.val();\n    console.log(\"メッセージが追加されました。\", newMessage);\n    callback(newMessage); // 新しいメッセージをコールバックで返す\n  });\n};\n\n//#endregion\n\n//#region バトル終了時\n// 回答を送信する関数\nexport const sendAnswer = async (roomId, answer) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const answerRef = ref(db, DATABASE_PATHS.submittedAnswers(roomId));\n  await push(answerRef, answer);\n  console.log(\"回答を送信しました。\", answer);\n};\n\n// 両プレイヤーの回答が揃ったらサーバーレス関数でスコア計算する\nexport const checkAnswers = roomId => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  // メッセージリストの参照\n  const answerRef = ref(db, DATABASE_PATHS.submittedAnswers(roomId));\n  // 両プレイヤーの選択が揃ったか確認\n  get(answerRef).then(answersSnapshot => {\n    if (Object.keys(answersSnapshot.val()).length == 2) {\n      console.log(\"両プレイヤーの回答が揃いました。\", answersSnapshot.val());\n      calculateBattleResult(roomId); //awaitしない\n    } else {\n      // 要素数が2未満の場合、リスナーを設定して監視\n      onValue(answerRef, snapshot => {\n        const updatedData = snapshot.val();\n        const updatedCount = updatedData ? Object.keys(updatedData).length : 0;\n\n        // 2つになったタイミングで `func()` を実行し、リスナーを解除\n        if (updatedCount >= 2) {\n          calculateBattleResult(roomId); //awaitしない\n          off(answerRef); // リスナーを解除\n          console.log(\"off checkAnswers\");\n        }\n      });\n    }\n  }).catch(error => {\n    console.error(\"回答の確認中にエラーが発生しました:\", error);\n  });\n};\n\n//resultが更新されたらバトル終了\nexport const onResultUpdated = (roomId, playerNumber, callback) => {\n  const resultRef = ref(db, `rooms/${roomId}/battleLog/result`);\n  const listener = onValue(resultRef, snapshot => {\n    const serverData = snapshot.val(); // RoomData型にキャスト\n    if (serverData) {\n      var _auth$currentUser;\n      console.log(\"バトル結果が更新されました。\", serverData);\n      const result = {\n        playerId: ((_auth$currentUser = auth.currentUser) === null || _auth$currentUser === void 0 ? void 0 : _auth$currentUser.uid) || \"\",\n        myAnswer: serverData.answers[playerNumber],\n        opponentAnswer: playerNumber === 0 ? serverData.answers[1] : serverData.answers[0],\n        corrects: serverData.corrects,\n        win: playerNumber === 0 ? serverData.scores[0] > serverData.scores[1] ? \"win\" : serverData.scores[0] < serverData.scores[1] ? \"lose\" : \"draw\" : serverData.scores[1] > serverData.scores[0] ? \"win\" : serverData.scores[1] < serverData.scores[0] ? \"lose\" : \"draw\",\n        score: playerNumber === 0 ? serverData.scores[0] : serverData.scores[1],\n        time: serverData.time\n      };\n      callback(result);\n    } else {\n      console.log(\"no result data\");\n      callback(null);\n    }\n  }, error => {\n    console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n    callback(null);\n  });\n  return () => {\n    console.log(\"off onResultUpdated\");\n    off(resultRef, \"value\", listener);\n  };\n};\n\n//#endregion","map":{"version":3,"names":["ref","push","get","onValue","onChildAdded","off","auth","db","DATABASE_PATHS","calculateBattleResult","onRoomPlayersUpdated","roomId","callback","stop","playersRef","players","listener","snapshot","current","console","log","PlayerData","val","error","onRoomUpdate","roomRef","rooms","roomData","getRoomData","exists","sendMessage","message","user","currentUser","Error","messageRef","messages","messageData","senderId","uid","timestamp","Date","now","https","onMessageAdded","messagesRef","newMessage","sendAnswer","answer","answerRef","submittedAnswers","checkAnswers","then","answersSnapshot","Object","keys","length","updatedData","updatedCount","catch","onResultUpdated","playerNumber","resultRef","serverData","_auth$currentUser","result","playerId","myAnswer","answers","opponentAnswer","corrects","win","scores","score","time"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase-realtime-database.ts"],"sourcesContent":["import {\n  ref,\n  push,\n  get,\n  onValue,\n  remove,\n  child,\n  onChildAdded,\n  off,\n} from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\nimport {\n  BattleLog,\n  BattleResult,\n  Message,\n  PlayerData,\n  ResultData,\n  RoomData,\n  SubmitAnswer,\n} from \"shared/dist/types\";\nimport { DATABASE_PATHS } from \"shared/src/database-paths.ts\";\nimport { calculateBattleResult } from \"./firebase-functions-client.ts\";\n//#region HomeView\n// プレイヤーデータを監視\nexport const onRoomPlayersUpdated = (\n  roomId: string,\n  callback: (players: PlayerData[] | null) => void,\n  stop: { current: boolean }\n) => {\n  const playersRef = ref(db, DATABASE_PATHS.players(roomId));\n  const listener = onValue(\n    playersRef,\n    (snapshot) => {\n      if (stop.current) {\n        // `stop` が `true` の場合、リスナーを解除して終了\n        off(playersRef, \"value\", listener);\n        console.log(\"リスナーが解除されました\");\n        return;\n      }\n      const PlayerData = snapshot.val() as PlayerData[] | null; // RoomData型にキャスト\n      if (PlayerData) {\n        console.log(\"プレイヤーデータが更新されました。\", PlayerData);\n        callback(PlayerData); // データがある場合はコールバックを呼び出す\n      } else {\n        console.error(\"ルームが存在しません。\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n\n  return () => {\n    console.log(\"off onRoomPlayersUpdated\");\n    off(playersRef, \"value\", listener);\n  };\n};\n\n// export const stopOnRoomPlayers = (roomId: string) => {\n//     const roomRef = ref(db, DATABASE_PATHS.rooms(roomId));\n//   off(roomRef);\n//   console.log(\"addPlayerの監視を停止しました。\");\n// };\n\n// ルームのデータを監視\nexport const onRoomUpdate = (\n  roomId: string,\n  callback: (roomData: RoomData | null) => void,\n  stop: { current: boolean }\n) => {\n  const roomRef = ref(db, DATABASE_PATHS.rooms(roomId));\n  const listener = onValue(\n    roomRef,\n    (snapshot) => {\n      if (stop.current) {\n        off(roomRef, \"value\", listener);\n        console.log(\"リスナーが解除されました111\");\n        return;\n      }\n      const roomData = snapshot.val() as RoomData | null; // RoomData型にキャスト\n      if (roomData) {\n        console.log(\"ルームデータが更新されました。\", roomData);\n        callback(roomData); // データがある場合はコールバックを呼び出す\n      } else {\n        console.error(\"ルームが存在しません。\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n  return () => {\n    console.log(\"リスナーが解除されました222\");\n    off(roomRef, \"value\", listener);\n  };\n};\n\n// ルームデータを取得する関数\nexport const getRoomData = async (roomId: string): Promise<RoomData | null> => {\n  try {\n    const roomRef = ref(db, DATABASE_PATHS.rooms(roomId));\n    const snapshot = await get(roomRef);\n\n    if (snapshot.exists()) {\n      const roomData = snapshot.val();\n      console.log(\"ルームデータを取得しました:\", roomData);\n      return roomData as RoomData; // RoomData型にキャストして返す\n    } else {\n      console.error(\"ルームが存在しません\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"ルームデータの取得に失敗しました:\", error);\n    return null;\n  }\n};\n//#endregion\n\n//#region BattleView\n\n//#region メッセージ\n// メッセージを送信する関数\nexport const sendMessage = async (roomId: string, message: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const messageRef = ref(db, DATABASE_PATHS.messages(roomId));\n  console.log(\"メッセージ:\", message);\n  const messageData: Message = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now(),\n  };\n  https: await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\", messageData);\n};\n\nexport const onMessageAdded = (\n  roomId: string,\n  callback: (data: any) => void\n) => {\n  // メッセージリストの参照\n  const messagesRef = ref(db, DATABASE_PATHS.messages(roomId));\n\n  // メッセージが追加されたときの監視\n  onChildAdded(messagesRef, (snapshot) => {\n    const newMessage = snapshot.val();\n    console.log(\"メッセージが追加されました。\", newMessage);\n    callback(newMessage); // 新しいメッセージをコールバックで返す\n  });\n};\n\n//#endregion\n\n//#region バトル終了時\n// 回答を送信する関数\nexport const sendAnswer = async (roomId: string, answer: SubmitAnswer) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const answerRef = ref(db, DATABASE_PATHS.submittedAnswers(roomId));\n  await push(answerRef, answer);\n  console.log(\"回答を送信しました。\", answer);\n};\n\n// 両プレイヤーの回答が揃ったらサーバーレス関数でスコア計算する\nexport const checkAnswers = (roomId: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  // メッセージリストの参照\n  const answerRef = ref(db, DATABASE_PATHS.submittedAnswers(roomId));\n  // 両プレイヤーの選択が揃ったか確認\n  get(answerRef)\n    .then((answersSnapshot) => {\n      if (Object.keys(answersSnapshot.val()).length == 2) {\n        console.log(\"両プレイヤーの回答が揃いました。\", answersSnapshot.val());\n        calculateBattleResult(roomId); //awaitしない\n      } else {\n        // 要素数が2未満の場合、リスナーを設定して監視\n        onValue(answerRef, (snapshot) => {\n          const updatedData = snapshot.val();\n          const updatedCount = updatedData\n            ? Object.keys(updatedData).length\n            : 0;\n\n          // 2つになったタイミングで `func()` を実行し、リスナーを解除\n          if (updatedCount >= 2) {\n            calculateBattleResult(roomId); //awaitしない\n            off(answerRef); // リスナーを解除\n            console.log(\"off checkAnswers\");\n          }\n        });\n      }\n    })\n    .catch((error) => {\n      console.error(\"回答の確認中にエラーが発生しました:\", error);\n    });\n};\n\n//resultが更新されたらバトル終了\nexport const onResultUpdated = (\n  roomId: string,\n  playerNumber: number,\n  callback: (players: ResultData | null) => void\n) => {\n  const resultRef = ref(db, `rooms/${roomId}/battleLog/result`);\n  const listener = onValue(\n    resultRef,\n    (snapshot) => {\n      const serverData = snapshot.val() as BattleResult; // RoomData型にキャスト\n      if (serverData) {\n        console.log(\"バトル結果が更新されました。\", serverData);\n        const result: ResultData = {\n          playerId: auth.currentUser?.uid || \"\",\n          myAnswer: serverData.answers[playerNumber],\n          opponentAnswer:\n            playerNumber === 0 ? serverData.answers[1] : serverData.answers[0],\n          corrects: serverData.corrects,\n          win:\n            playerNumber === 0\n              ? serverData.scores[0] > serverData.scores[1]\n                ? \"win\"\n                : serverData.scores[0] < serverData.scores[1]\n                  ? \"lose\"\n                  : \"draw\"\n              : serverData.scores[1] > serverData.scores[0]\n                ? \"win\"\n                : serverData.scores[1] < serverData.scores[0]\n                  ? \"lose\"\n                  : \"draw\",\n          score:\n            playerNumber === 0 ? serverData.scores[0] : serverData.scores[1],\n          time: serverData.time,\n        };\n        callback(result);\n      } else {\n        console.log(\"no result data\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n  return () => {\n    console.log(\"off onResultUpdated\");\n    off(resultRef, \"value\", listener);\n  };\n};\n\n//#endregion\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}