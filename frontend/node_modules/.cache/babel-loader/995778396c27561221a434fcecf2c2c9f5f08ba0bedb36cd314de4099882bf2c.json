{"ast":null,"code":"import{ref,push,onValue,remove}from\"firebase/database\";import{auth}from\"./firebase_f.ts\";// Firebaseの認証インスタンスをインポート\nimport{db}from\"./firebase_f.ts\";// Firebase初期化ファイルからデータベースをインポート\n// // マッチングリクエストを行う関数\n// export const requestMatch = async () => {\n//   const user = auth.currentUser;\n//   if (!user) {\n//     throw new Error(\"ログインしていないユーザーです。\");\n//   }\n//   const playerId = user.uid;\n//   const playerRating = Math.floor(Math.random() * 1000); // 仮のレーティングを生成（本番ではユーザーの実際のスキルに基づく）\n//   // プレイヤー情報を待機中のプレイヤーリストに追加\n//   const playerData = {\n//     id: playerId,\n//     rating: playerRating,\n//     timeWaiting: Date.now(),\n//   };\n//   const waitingPlayersRef = ref(db, \"waitingPlayers/\" + playerId);\n//   await set(waitingPlayersRef, playerData);\n//   console.log(\"プレイヤーを待機リストに追加しました。プレイヤーID:\", playerId);\n// };\n// マッチングが成立したらコールバックを実行するリスナー\nexport const onMatchFound=callback=>{const user=auth.currentUser;if(!user){throw new Error(\"ログインしていないユーザーです。\");}const playerId=user.uid;const playerRef=ref(db,\"players/\"+playerId+\"/match\");// プレイヤーのマッチング情報を監視\nonValue(playerRef,snapshot=>{const matchData=snapshot.val();if(matchData){callback(matchData);// マッチングが見つかればコールバックを実行\n}});};// メッセージを送信する関数\nexport const sendMessage=async(roomId,message)=>{const user=auth.currentUser;if(!user){throw new Error(\"ログインしていないユーザーです。\");}const messageRef=ref(db,`rooms/${roomId}/messages`);const messageData={senderId:user.uid,message,timestamp:Date.now()};await push(messageRef,messageData);console.log(\"メッセージを送信しました。\");};// バトルログの更新を監視するリスナー\nexport const onTurnUpdated=(roomId,callback)=>{const battleLogRef=ref(db,`rooms/${roomId}/battleLog`);// バトルログの更新をリアルタイムで監視\nonValue(battleLogRef,snapshot=>{const battleLogData=snapshot.val();if(battleLogData){callback(battleLogData);// バトルログが更新されたらコールバックを実行\n}});};// バトル終了を監視するリスナー\nexport const onBattleEnd=(roomId,callback)=>{const statusRef=ref(db,`rooms/${roomId}/status`);// バトルの終了を監視\nonValue(statusRef,snapshot=>{const status=snapshot.val();if(status===\"ended\"){callback();// バトルが終了したらコールバックを実行\n}});};// マッチング成立時、マッチングがキャンセルされた場合やリロード時にwaitingPlayersから削除する関数\nexport const removeFromWaitingList=async()=>{const user=auth.currentUser;if(!user){throw new Error(\"ログインしていないユーザーです。\");}const playerId=user.uid;const playerRef=ref(db,\"waitingPlayers/\"+playerId);await remove(playerRef);// 待機リストからプレイヤーを削除\nconsole.log(\"プレイヤーを待機リストから削除しました。\");};","map":{"version":3,"names":["ref","push","onValue","remove","auth","db","onMatchFound","callback","user","currentUser","Error","playerId","uid","playerRef","snapshot","matchData","val","sendMessage","roomId","message","messageRef","messageData","senderId","timestamp","Date","now","console","log","onTurnUpdated","battleLogRef","battleLogData","onBattleEnd","statusRef","status","removeFromWaitingList"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase-realtime-database.ts"],"sourcesContent":["\nimport { ref, push, set, update, onValue, remove } from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\n\n\n// // マッチングリクエストを行う関数\n// export const requestMatch = async () => {\n//   const user = auth.currentUser;\n//   if (!user) {\n//     throw new Error(\"ログインしていないユーザーです。\");\n//   }\n\n//   const playerId = user.uid;\n//   const playerRating = Math.floor(Math.random() * 1000); // 仮のレーティングを生成（本番ではユーザーの実際のスキルに基づく）\n\n//   // プレイヤー情報を待機中のプレイヤーリストに追加\n//   const playerData = {\n//     id: playerId,\n//     rating: playerRating,\n//     timeWaiting: Date.now(),\n//   };\n\n//   const waitingPlayersRef = ref(db, \"waitingPlayers/\" + playerId);\n//   await set(waitingPlayersRef, playerData);\n\n//   console.log(\"プレイヤーを待機リストに追加しました。プレイヤーID:\", playerId);\n// };\n\n// マッチングが成立したらコールバックを実行するリスナー\nexport const onMatchFound = (callback: (data: any) => void) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const playerId = user.uid;\n  const playerRef = ref(db, \"players/\" + playerId + \"/match\");\n  \n  // プレイヤーのマッチング情報を監視\n  onValue(playerRef, (snapshot) => {\n    const matchData = snapshot.val();\n    if (matchData) {\n      callback(matchData); // マッチングが見つかればコールバックを実行\n    }\n  });\n};\n\n// メッセージを送信する関数\nexport const sendMessage = async (roomId: string, message: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const messageRef = ref(db, `rooms/${roomId}/messages`);\n  const messageData = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now(),\n  };\n\n  await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\");\n};\n\n// バトルログの更新を監視するリスナー\nexport const onTurnUpdated = (roomId: string, callback: (data: any) => void) => {\n  const battleLogRef = ref(db, `rooms/${roomId}/battleLog`);\n  \n  // バトルログの更新をリアルタイムで監視\n  onValue(battleLogRef, (snapshot) => {\n    const battleLogData = snapshot.val();\n    if (battleLogData) {\n      callback(battleLogData); // バトルログが更新されたらコールバックを実行\n    }\n  });\n};\n\n// バトル終了を監視するリスナー\nexport const onBattleEnd = (roomId: string, callback: () => void) => {\n  const statusRef = ref(db, `rooms/${roomId}/status`);\n  \n  // バトルの終了を監視\n  onValue(statusRef, (snapshot) => {\n    const status = snapshot.val();\n    if (status === \"ended\") {\n      callback(); // バトルが終了したらコールバックを実行\n    }\n  });\n};\n\n// マッチング成立時、マッチングがキャンセルされた場合やリロード時にwaitingPlayersから削除する関数\nexport const removeFromWaitingList = async () => {\n    const user = auth.currentUser;\n    if (!user) {\n      throw new Error(\"ログインしていないユーザーです。\");\n    }\n  \n    const playerId = user.uid;\n    const playerRef = ref(db, \"waitingPlayers/\" + playerId);\n    await remove(playerRef); // 待機リストからプレイヤーを削除\n    console.log(\"プレイヤーを待機リストから削除しました。\");\n  };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}