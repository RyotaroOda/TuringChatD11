{"ast":null,"code":"// services/firebase-functions-client.ts\nimport{httpsCallable}from\"firebase/functions\";import{auth,functions}from\"./firebase_f.ts\";// Firebase初期化ファイルをインポート\n//#region HomeView\n// サーバーレス関数を使ってマッチングリクエストを送信する関数\nexport const requestMatch=async function(player){let retryCount=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;const requestMatchFunction=httpsCallable(functions,\"requestMatchFunction\");const TIMEOUT_DURATION=60000;// 60秒待機してもマッチングしなければタイムアウト\nlet timeoutId;let attempt=0;while(attempt<retryCount){attempt+=1;try{// マッチングリクエストを送信\nconst result=await new Promise((resolve,reject)=>{timeoutId=setTimeout(()=>reject({message:\"マッチングタイムアウト\"}),TIMEOUT_DURATION);requestMatchFunction(player).then(response=>{// マッチング成功時\nclearTimeout(timeoutId);// タイムアウトをクリア\nresolve(response.data);}).catch(error=>{// マッチング失敗時\nclearTimeout(timeoutId);// タイムアウトをクリア\nreject({message:error.message});});});console.log(\"マッチング成功:\",result);return result;}catch(error){if(attempt===retryCount){console.error(`タイムアウト!（試行${attempt}回目）:`,error);return{roomId:\"\",startBattle:false,message:`マッチングエラー（試行${attempt}回目）:`};}console.error(`マッチングエラー?（試行${attempt}回目）:`,error);if(attempt<retryCount){// Exponential Backoff (指数バックオフ)\nawait new Promise(resolve=>setTimeout(resolve,Math.pow(2,attempt)*1000));}else{return{roomId:\"\",startBattle:false,message:`タイムアウト（試行${attempt}回目）:`};}}}// 再試行失敗時の結果\nreturn{roomId:\"\",startBattle:false,message:\"再試行失敗\"};};// サーバーレス関数を使ってマッチングキャンセルを行う関数\nexport const cancelRequest=async()=>{const user=auth.currentUser;if(!user){throw new Error(\"ログインしていないユーザーです。\");}const cancelMatchFunction=httpsCallable(functions,\"cancelMatchFunction\");await cancelMatchFunction();};//#endregion\n//# region BattleView\nexport const calculateBattleResult=async roomId=>{const user=auth.currentUser;if(!user){throw new Error(\"ログインしていないユーザーです。\");}const calculateBattleResultFunction=httpsCallable(functions,\"calculateBattleResultFunction\");console.log(\"calculating\");calculateBattleResultFunction(roomId);//awaitしない\n};//\n//#endregion","map":{"version":3,"names":["httpsCallable","auth","functions","requestMatch","player","retryCount","arguments","length","undefined","requestMatchFunction","TIMEOUT_DURATION","timeoutId","attempt","result","Promise","resolve","reject","setTimeout","message","then","response","clearTimeout","data","catch","error","console","log","roomId","startBattle","Math","pow","cancelRequest","user","currentUser","Error","cancelMatchFunction","calculateBattleResult","calculateBattleResultFunction"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase-functions-client.ts"],"sourcesContent":["// services/firebase-functions-client.ts\nimport { httpsCallable } from \"firebase/functions\";\nimport { auth, functions } from \"./firebase_f.ts\"; // Firebase初期化ファイルをインポート\nimport { PlayerData, MatchResult } from \"shared/dist/types\";\n\n//#region HomeView\n// サーバーレス関数を使ってマッチングリクエストを送信する関数\nexport const requestMatch = async (\n  player: PlayerData,\n  retryCount = 10\n): Promise<MatchResult> => {\n  const requestMatchFunction = httpsCallable(functions, \"requestMatchFunction\");\n\n  const TIMEOUT_DURATION = 60000; // 60秒待機してもマッチングしなければタイムアウト\n  let timeoutId;\n  let attempt = 0;\n\n  while (attempt < retryCount) {\n    attempt += 1;\n    try {\n      // マッチングリクエストを送信\n      const result: MatchResult = await new Promise((resolve, reject) => {\n        timeoutId = setTimeout(\n          () => reject({ message: \"マッチングタイムアウト\" }),\n          TIMEOUT_DURATION\n        );\n        requestMatchFunction(player)\n          .then((response) => {\n            // マッチング成功時\n            clearTimeout(timeoutId); // タイムアウトをクリア\n            resolve(response.data as MatchResult);\n          })\n          .catch((error) => {\n            // マッチング失敗時\n            clearTimeout(timeoutId); // タイムアウトをクリア\n            reject({ message: error.message });\n          });\n      });\n      console.log(\"マッチング成功:\", result);\n      return result;\n    } catch (error) {\n      if (attempt === retryCount) {\n        console.error(`タイムアウト!（試行${attempt}回目）:`, error);\n        return {\n          roomId: \"\",\n          startBattle: false,\n          message: `マッチングエラー（試行${attempt}回目）:`,\n        };\n      }\n      console.error(`マッチングエラー?（試行${attempt}回目）:`, error);\n      if (attempt < retryCount) {\n        // Exponential Backoff (指数バックオフ)\n        await new Promise((resolve) =>\n          setTimeout(resolve, Math.pow(2, attempt) * 1000)\n        );\n      } else {\n        return {\n          roomId: \"\",\n          startBattle: false,\n          message: `タイムアウト（試行${attempt}回目）:`,\n        };\n      }\n    }\n  }\n  // 再試行失敗時の結果\n  return {\n    roomId: \"\",\n    startBattle: false,\n    message: \"再試行失敗\",\n  };\n};\n\n// サーバーレス関数を使ってマッチングキャンセルを行う関数\nexport const cancelRequest = async () => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const cancelMatchFunction = httpsCallable(functions, \"cancelMatchFunction\");\n  await cancelMatchFunction();\n};\n\n//#endregion\n\n//# region BattleView\nexport const calculateBattleResult = async (roomId: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const calculateBattleResultFunction = httpsCallable(\n    functions,\n    \"calculateBattleResultFunction\"\n  );\n  console.log(\"calculating\");\n  calculateBattleResultFunction(roomId); //awaitしない\n};\n//\n\n//#endregion\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}