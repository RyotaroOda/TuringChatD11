{"ast":null,"code":"import{ref,push,get,onValue,remove}from\"firebase/database\";import{auth}from\"./firebase_f.ts\";// Firebaseの認証インスタンスをインポート\nimport{db}from\"./firebase_f.ts\";// Firebase初期化ファイルからデータベースをインポート\n// ルームのデータを監視\nexport const onRoomUpdate=(roomId,callback)=>{const roomRef=ref(db,`rooms/${roomId}`);onValue(roomRef,snapshot=>{const roomData=snapshot.val();// RoomData型にキャスト\nif(roomData){callback(roomData);// データがある場合はコールバックを呼び出す\n}else{console.error(\"ルームが存在しません。\");callback(null);}},error=>{console.error(\"ルームデータの監視中にエラーが発生しました:\",error);callback(null);});};// ルームデータを取得する関数\nexport const getRoomData=async roomId=>{try{const roomRef=ref(db,`rooms/${roomId}`);const snapshot=await get(roomRef);if(snapshot.exists()){const roomData=snapshot.val();return roomData;// RoomData型にキャストして返す\n}else{console.error(\"ルームが存在しません\");return null;}}catch(error){console.error(\"ルームデータの取得に失敗しました:\",error);return null;}};// メッセージを送信する関数\nexport const sendMessage=async(roomId,message)=>{const user=auth.currentUser;if(!user){throw new Error(\"ログインしていないユーザーです。\");}const messageRef=ref(db,`rooms/${roomId}/messages`);const messageData={senderId:user.uid,message,timestamp:Date.now()};await push(messageRef,messageData);console.log(\"メッセージを送信しました。\");};// バトルログの更新を監視するリスナー\nexport const onTurnUpdated=(roomId,callback)=>{const battleLogRef=ref(db,`rooms/${roomId}/battleLog`);// バトルログの更新をリアルタイムで監視\nonValue(battleLogRef,snapshot=>{const battleLogData=snapshot.val();if(battleLogData){callback(battleLogData);// バトルログが更新されたらコールバックを実行\n}});};// バトル終了を監視するリスナー\nexport const onBattleEnd=(roomId,callback)=>{const statusRef=ref(db,`rooms/${roomId}/status`);// バトルの終了を監視\nonValue(statusRef,snapshot=>{const status=snapshot.val();if(status===\"ended\"){callback();// バトルが終了したらコールバックを実行\n}});};// マッチング成立時、マッチングがキャンセルされた場合やリロード時にwaitingPlayersから削除する関数\nexport const removeFromWaitingList=async()=>{const user=auth.currentUser;if(!user){throw new Error(\"ログインしていないユーザーです。\");}const playerId=user.uid;const playerRef=ref(db,\"waitingPlayers/\"+playerId);await remove(playerRef);// 待機リストからプレイヤーを削除\nconsole.log(\"プレイヤーを待機リストから削除しました。\");};","map":{"version":3,"names":["ref","push","get","onValue","remove","auth","db","onRoomUpdate","roomId","callback","roomRef","snapshot","roomData","val","console","error","getRoomData","exists","sendMessage","message","user","currentUser","Error","messageRef","messageData","senderId","uid","timestamp","Date","now","log","onTurnUpdated","battleLogRef","battleLogData","onBattleEnd","statusRef","status","removeFromWaitingList","playerId","playerRef"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase-realtime-database.ts"],"sourcesContent":["import { ref, push, get, onValue, remove } from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\nimport { RoomData } from \"../shared/types.ts\";\n\n// ルームのデータを監視\nexport const onRoomUpdate = (\n  roomId: string,\n  callback: (roomData: RoomData | null) => void\n) => {\n  const roomRef = ref(db, `rooms/${roomId}`);\n  onValue(\n    roomRef,\n    (snapshot) => {\n      const roomData = snapshot.val() as RoomData | null; // RoomData型にキャスト\n      if (roomData) {\n        callback(roomData); // データがある場合はコールバックを呼び出す\n      } else {\n        console.error(\"ルームが存在しません。\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n};\n\n// ルームデータを取得する関数\nexport const getRoomData = async (roomId: string): Promise<RoomData | null> => {\n  try {\n    const roomRef = ref(db, `rooms/${roomId}`);\n    const snapshot = await get(roomRef);\n\n    if (snapshot.exists()) {\n      const roomData = snapshot.val();\n      return roomData as RoomData; // RoomData型にキャストして返す\n    } else {\n      console.error(\"ルームが存在しません\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"ルームデータの取得に失敗しました:\", error);\n    return null;\n  }\n};\n\n// メッセージを送信する関数\nexport const sendMessage = async (roomId: string, message: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const messageRef = ref(db, `rooms/${roomId}/messages`);\n  const messageData = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now(),\n  };\n\n  await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\");\n};\n\n// バトルログの更新を監視するリスナー\nexport const onTurnUpdated = (\n  roomId: string,\n  callback: (data: any) => void\n) => {\n  const battleLogRef = ref(db, `rooms/${roomId}/battleLog`);\n\n  // バトルログの更新をリアルタイムで監視\n  onValue(battleLogRef, (snapshot) => {\n    const battleLogData = snapshot.val();\n    if (battleLogData) {\n      callback(battleLogData); // バトルログが更新されたらコールバックを実行\n    }\n  });\n};\n\n// バトル終了を監視するリスナー\nexport const onBattleEnd = (roomId: string, callback: () => void) => {\n  const statusRef = ref(db, `rooms/${roomId}/status`);\n\n  // バトルの終了を監視\n  onValue(statusRef, (snapshot) => {\n    const status = snapshot.val();\n    if (status === \"ended\") {\n      callback(); // バトルが終了したらコールバックを実行\n    }\n  });\n};\n\n// マッチング成立時、マッチングがキャンセルされた場合やリロード時にwaitingPlayersから削除する関数\nexport const removeFromWaitingList = async () => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const playerId = user.uid;\n  const playerRef = ref(db, \"waitingPlayers/\" + playerId);\n  await remove(playerRef); // 待機リストからプレイヤーを削除\n  console.log(\"プレイヤーを待機リストから削除しました。\");\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}