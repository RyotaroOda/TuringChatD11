{"ast":null,"code":"import { v4 as uuidv4 } from \"uuid\"; // uuidをインポート\n\nlet waitingPlayers = []; // 待機中のプレイヤーIDのリスト\nlet waitingPlayersWithRating = []; // レート待機中のプレイヤーリスト\n\n// ランダムマッチングリクエスト\nexport function requestRandomMatch(playerId) {\n  if (waitingPlayers.length === 0) {\n    waitingPlayers.push(playerId); // 待機リストにプレイヤーを追加\n    console.log(`${playerId} is waiting for a match...`);\n  } else {\n    const opponentId = waitingPlayers.pop(); // 待機中のプレイヤーを取得\n    if (opponentId) {\n      const roomId = generateRoomId(); // 部屋IDを生成\n      startMatch(playerId, opponentId, roomId); // 対戦開始\n    }\n  }\n}\n\n// タイムアウト付きレートマッチングリクエスト\nexport function requestRateMatch(player) {\n  const maxWaitingTime = 300; // 最大待機時間（秒）\n  let matchFound = false;\n  const interval = setInterval(() => {\n    player.timeWaiting += 10; // 待機時間を10秒ずつ増加\n\n    waitingPlayersWithRating.forEach(opponent => {\n      const ratingDiff = Math.abs(opponent.rating - player.rating);\n      const allowedRatingDiff = Math.min(player.timeWaiting, maxWaitingTime); // 待機時間に基づいて許容範囲を拡大\n\n      if (ratingDiff <= allowedRatingDiff) {\n        const roomId = generateRoomId();\n        startMatch(player.id, opponent.id, roomId); // マッチング\n        waitingPlayersWithRating = waitingPlayersWithRating.filter(p => p.id !== opponent.id); // 待機リストから削除\n        matchFound = true;\n        clearInterval(interval); // マッチが成立したらタイマーを停止\n      }\n    });\n    if (matchFound) return;\n    if (player.timeWaiting >= maxWaitingTime) {\n      console.log(`${player.id} could not find a suitable match.`);\n      waitingPlayersWithRating.push(player);\n      clearInterval(interval); // タイムアウト処理\n    }\n  }, 10000); // 10秒ごとに許容範囲を拡大\n}\nfunction startMatch(player1, player2, roomId) {\n  console.log(`Matched ${player1} with ${player2} in room ${roomId}`);\n  // 対戦相手に部屋の情報を送信する処理（省略可能）\n}\nfunction generateRoomId() {\n  return uuidv4(); // UUIDを使用してユニークな部屋IDを生成\n}","map":{"version":3,"names":["v4","uuidv4","waitingPlayers","waitingPlayersWithRating","requestRandomMatch","playerId","length","push","console","log","opponentId","pop","roomId","generateRoomId","startMatch","requestRateMatch","player","maxWaitingTime","matchFound","interval","setInterval","timeWaiting","forEach","opponent","ratingDiff","Math","abs","rating","allowedRatingDiff","min","id","filter","p","clearInterval","player1","player2"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/maching.ts"],"sourcesContent":["import { Player } from '../../../shared/types.ts';\nimport { v4 as uuidv4 } from \"uuid\"; // uuidをインポート\n\nlet waitingPlayers: string[] = []; // 待機中のプレイヤーIDのリスト\nlet waitingPlayersWithRating: Player[] = []; // レート待機中のプレイヤーリスト\n\n// ランダムマッチングリクエスト\nexport function requestRandomMatch(playerId: string) {\n  if (waitingPlayers.length === 0) {\n    waitingPlayers.push(playerId); // 待機リストにプレイヤーを追加\n    console.log(`${playerId} is waiting for a match...`);\n  } else {\n    const opponentId = waitingPlayers.pop(); // 待機中のプレイヤーを取得\n    if (opponentId) {\n      const roomId = generateRoomId(); // 部屋IDを生成\n      startMatch(playerId, opponentId, roomId); // 対戦開始\n    }\n  }\n}\n\n// タイムアウト付きレートマッチングリクエスト\nexport function requestRateMatch(player: Player) {\n    const maxWaitingTime = 300; // 最大待機時間（秒）\n    let matchFound = false;\n  \n    const interval = setInterval(() => {\n      player.timeWaiting += 10; // 待機時間を10秒ずつ増加\n  \n      waitingPlayersWithRating.forEach(opponent => {\n        const ratingDiff = Math.abs(opponent.rating - player.rating);\n        const allowedRatingDiff = Math.min(player.timeWaiting, maxWaitingTime); // 待機時間に基づいて許容範囲を拡大\n  \n        if (ratingDiff <= allowedRatingDiff) {\n          const roomId = generateRoomId();\n          startMatch(player.id, opponent.id, roomId); // マッチング\n          waitingPlayersWithRating = waitingPlayersWithRating.filter(p => p.id !== opponent.id); // 待機リストから削除\n          matchFound = true;\n          clearInterval(interval); // マッチが成立したらタイマーを停止\n        }\n      });\n  \n      if (matchFound) return;\n  \n      if (player.timeWaiting >= maxWaitingTime) {\n        console.log(`${player.id} could not find a suitable match.`);\n        waitingPlayersWithRating.push(player);\n        clearInterval(interval); // タイムアウト処理\n      }\n    }, 10000); // 10秒ごとに許容範囲を拡大\n  }\n\nfunction startMatch(player1: string, player2: string, roomId: string) {\n  console.log(`Matched ${player1} with ${player2} in room ${roomId}`);\n  // 対戦相手に部屋の情報を送信する処理（省略可能）\n}\n\nfunction generateRoomId() {\n  return uuidv4(); // UUIDを使用してユニークな部屋IDを生成\n}\n"],"mappings":"AACA,SAASA,EAAE,IAAIC,MAAM,QAAQ,MAAM,CAAC,CAAC;;AAErC,IAAIC,cAAwB,GAAG,EAAE,CAAC,CAAC;AACnC,IAAIC,wBAAkC,GAAG,EAAE,CAAC,CAAC;;AAE7C;AACA,OAAO,SAASC,kBAAkBA,CAACC,QAAgB,EAAE;EACnD,IAAIH,cAAc,CAACI,MAAM,KAAK,CAAC,EAAE;IAC/BJ,cAAc,CAACK,IAAI,CAACF,QAAQ,CAAC,CAAC,CAAC;IAC/BG,OAAO,CAACC,GAAG,CAAC,GAAGJ,QAAQ,4BAA4B,CAAC;EACtD,CAAC,MAAM;IACL,MAAMK,UAAU,GAAGR,cAAc,CAACS,GAAG,CAAC,CAAC,CAAC,CAAC;IACzC,IAAID,UAAU,EAAE;MACd,MAAME,MAAM,GAAGC,cAAc,CAAC,CAAC,CAAC,CAAC;MACjCC,UAAU,CAACT,QAAQ,EAAEK,UAAU,EAAEE,MAAM,CAAC,CAAC,CAAC;IAC5C;EACF;AACF;;AAEA;AACA,OAAO,SAASG,gBAAgBA,CAACC,MAAc,EAAE;EAC7C,MAAMC,cAAc,GAAG,GAAG,CAAC,CAAC;EAC5B,IAAIC,UAAU,GAAG,KAAK;EAEtB,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;IACjCJ,MAAM,CAACK,WAAW,IAAI,EAAE,CAAC,CAAC;;IAE1BlB,wBAAwB,CAACmB,OAAO,CAACC,QAAQ,IAAI;MAC3C,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAACH,QAAQ,CAACI,MAAM,GAAGX,MAAM,CAACW,MAAM,CAAC;MAC5D,MAAMC,iBAAiB,GAAGH,IAAI,CAACI,GAAG,CAACb,MAAM,CAACK,WAAW,EAAEJ,cAAc,CAAC,CAAC,CAAC;;MAExE,IAAIO,UAAU,IAAII,iBAAiB,EAAE;QACnC,MAAMhB,MAAM,GAAGC,cAAc,CAAC,CAAC;QAC/BC,UAAU,CAACE,MAAM,CAACc,EAAE,EAAEP,QAAQ,CAACO,EAAE,EAAElB,MAAM,CAAC,CAAC,CAAC;QAC5CT,wBAAwB,GAAGA,wBAAwB,CAAC4B,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACF,EAAE,KAAKP,QAAQ,CAACO,EAAE,CAAC,CAAC,CAAC;QACvFZ,UAAU,GAAG,IAAI;QACjBe,aAAa,CAACd,QAAQ,CAAC,CAAC,CAAC;MAC3B;IACF,CAAC,CAAC;IAEF,IAAID,UAAU,EAAE;IAEhB,IAAIF,MAAM,CAACK,WAAW,IAAIJ,cAAc,EAAE;MACxCT,OAAO,CAACC,GAAG,CAAC,GAAGO,MAAM,CAACc,EAAE,mCAAmC,CAAC;MAC5D3B,wBAAwB,CAACI,IAAI,CAACS,MAAM,CAAC;MACrCiB,aAAa,CAACd,QAAQ,CAAC,CAAC,CAAC;IAC3B;EACF,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;AACb;AAEF,SAASL,UAAUA,CAACoB,OAAe,EAAEC,OAAe,EAAEvB,MAAc,EAAE;EACpEJ,OAAO,CAACC,GAAG,CAAC,WAAWyB,OAAO,SAASC,OAAO,YAAYvB,MAAM,EAAE,CAAC;EACnE;AACF;AAEA,SAASC,cAAcA,CAAA,EAAG;EACxB,OAAOZ,MAAM,CAAC,CAAC,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}