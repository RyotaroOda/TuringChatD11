{"ast":null,"code":"import { ref, push, onValue, remove } from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\n\n// // マッチングリクエストを行う関数\n// export const requestMatch = async () => {\n//   const user = auth.currentUser;\n//   if (!user) {\n//     throw new Error(\"ログインしていないユーザーです。\");\n//   }\n\n//   const playerId = user.uid;\n//   const playerRating = Math.floor(Math.random() * 1000); // 仮のレーティングを生成（本番ではユーザーの実際のスキルに基づく）\n\n//   // プレイヤー情報を待機中のプレイヤーリストに追加\n//   const playerData = {\n//     id: playerId,\n//     rating: playerRating,\n//     timeWaiting: Date.now(),\n//   };\n\n//   const waitingPlayersRef = ref(db, \"waitingPlayers/\" + playerId);\n//   await set(waitingPlayersRef, playerData);\n\n//   console.log(\"プレイヤーを待機リストに追加しました。プレイヤーID:\", playerId);\n// };\n\n// マッチングが成立したらコールバックを実行するリスナー\nexport const onMatchFound = callback => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const playerId = user.uid;\n  const playerRef = ref(db, \"players/\" + playerId + \"/match\");\n\n  // プレイヤーのマッチング情報を監視\n  onValue(playerRef, snapshot => {\n    const matchData = snapshot.val();\n    if (matchData) {\n      callback(matchData); // マッチングが見つかればコールバックを実行\n    }\n  });\n};\n\n// メッセージを送信する関数\nexport const sendMessage = async (roomId, message) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const messageRef = ref(db, `rooms/${roomId}/messages`);\n  const messageData = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now()\n  };\n  await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\");\n};\n\n// バトルログの更新を監視するリスナー\nexport const onTurnUpdated = (roomId, callback) => {\n  const battleLogRef = ref(db, `rooms/${roomId}/battleLog`);\n\n  // バトルログの更新をリアルタイムで監視\n  onValue(battleLogRef, snapshot => {\n    const battleLogData = snapshot.val();\n    if (battleLogData) {\n      callback(battleLogData); // バトルログが更新されたらコールバックを実行\n    }\n  });\n};\n\n// バトル終了を監視するリスナー\nexport const onBattleEnd = (roomId, callback) => {\n  const statusRef = ref(db, `rooms/${roomId}/status`);\n\n  // バトルの終了を監視\n  onValue(statusRef, snapshot => {\n    const status = snapshot.val();\n    if (status === \"ended\") {\n      callback(); // バトルが終了したらコールバックを実行\n    }\n  });\n};\n\n// マッチング成立時、マッチングがキャンセルされた場合やリロード時にwaitingPlayersから削除する関数\nexport const removeFromWaitingList = async () => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const playerId = user.uid;\n  const playerRef = ref(db, \"waitingPlayers/\" + playerId);\n  await remove(playerRef); // 待機リストからプレイヤーを削除\n  console.log(\"プレイヤーを待機リストから削除しました。\");\n};","map":{"version":3,"names":["ref","push","onValue","remove","auth","db","onMatchFound","callback","user","currentUser","Error","playerId","uid","playerRef","snapshot","matchData","val","sendMessage","roomId","message","messageRef","messageData","senderId","timestamp","Date","now","console","log","onTurnUpdated","battleLogRef","battleLogData","onBattleEnd","statusRef","status","removeFromWaitingList"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase-realtime-database.ts"],"sourcesContent":["\nimport { ref, push, set, update, onValue, remove } from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\n\n\n// // マッチングリクエストを行う関数\n// export const requestMatch = async () => {\n//   const user = auth.currentUser;\n//   if (!user) {\n//     throw new Error(\"ログインしていないユーザーです。\");\n//   }\n\n//   const playerId = user.uid;\n//   const playerRating = Math.floor(Math.random() * 1000); // 仮のレーティングを生成（本番ではユーザーの実際のスキルに基づく）\n\n//   // プレイヤー情報を待機中のプレイヤーリストに追加\n//   const playerData = {\n//     id: playerId,\n//     rating: playerRating,\n//     timeWaiting: Date.now(),\n//   };\n\n//   const waitingPlayersRef = ref(db, \"waitingPlayers/\" + playerId);\n//   await set(waitingPlayersRef, playerData);\n\n//   console.log(\"プレイヤーを待機リストに追加しました。プレイヤーID:\", playerId);\n// };\n\n// マッチングが成立したらコールバックを実行するリスナー\nexport const onMatchFound = (callback: (data: any) => void) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const playerId = user.uid;\n  const playerRef = ref(db, \"players/\" + playerId + \"/match\");\n  \n  // プレイヤーのマッチング情報を監視\n  onValue(playerRef, (snapshot) => {\n    const matchData = snapshot.val();\n    if (matchData) {\n      callback(matchData); // マッチングが見つかればコールバックを実行\n    }\n  });\n};\n\n// メッセージを送信する関数\nexport const sendMessage = async (roomId: string, message: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const messageRef = ref(db, `rooms/${roomId}/messages`);\n  const messageData = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now(),\n  };\n\n  await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\");\n};\n\n// バトルログの更新を監視するリスナー\nexport const onTurnUpdated = (roomId: string, callback: (data: any) => void) => {\n  const battleLogRef = ref(db, `rooms/${roomId}/battleLog`);\n  \n  // バトルログの更新をリアルタイムで監視\n  onValue(battleLogRef, (snapshot) => {\n    const battleLogData = snapshot.val();\n    if (battleLogData) {\n      callback(battleLogData); // バトルログが更新されたらコールバックを実行\n    }\n  });\n};\n\n// バトル終了を監視するリスナー\nexport const onBattleEnd = (roomId: string, callback: () => void) => {\n  const statusRef = ref(db, `rooms/${roomId}/status`);\n  \n  // バトルの終了を監視\n  onValue(statusRef, (snapshot) => {\n    const status = snapshot.val();\n    if (status === \"ended\") {\n      callback(); // バトルが終了したらコールバックを実行\n    }\n  });\n};\n\n// マッチング成立時、マッチングがキャンセルされた場合やリロード時にwaitingPlayersから削除する関数\nexport const removeFromWaitingList = async () => {\n    const user = auth.currentUser;\n    if (!user) {\n      throw new Error(\"ログインしていないユーザーです。\");\n    }\n  \n    const playerId = user.uid;\n    const playerRef = ref(db, \"waitingPlayers/\" + playerId);\n    await remove(playerRef); // 待機リストからプレイヤーを削除\n    console.log(\"プレイヤーを待機リストから削除しました。\");\n  };\n"],"mappings":"AACA,SAASA,GAAG,EAAEC,IAAI,EAAeC,OAAO,EAAEC,MAAM,QAAQ,mBAAmB;AAC3E,SAASC,IAAI,QAAQ,iBAAiB,CAAC,CAAC;AACxC,SAASC,EAAE,QAAQ,iBAAiB,CAAC,CAAC;;AAGtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,OAAO,MAAMC,YAAY,GAAIC,QAA6B,IAAK;EAC7D,MAAMC,IAAI,GAAGJ,IAAI,CAACK,WAAW;EAC7B,IAAI,CAACD,IAAI,EAAE;IACT,MAAM,IAAIE,KAAK,CAAC,kBAAkB,CAAC;EACrC;EAEA,MAAMC,QAAQ,GAAGH,IAAI,CAACI,GAAG;EACzB,MAAMC,SAAS,GAAGb,GAAG,CAACK,EAAE,EAAE,UAAU,GAAGM,QAAQ,GAAG,QAAQ,CAAC;;EAE3D;EACAT,OAAO,CAACW,SAAS,EAAGC,QAAQ,IAAK;IAC/B,MAAMC,SAAS,GAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC;IAChC,IAAID,SAAS,EAAE;MACbR,QAAQ,CAACQ,SAAS,CAAC,CAAC,CAAC;IACvB;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAG,MAAAA,CAAOC,MAAc,EAAEC,OAAe,KAAK;EACpE,MAAMX,IAAI,GAAGJ,IAAI,CAACK,WAAW;EAC7B,IAAI,CAACD,IAAI,EAAE;IACT,MAAM,IAAIE,KAAK,CAAC,kBAAkB,CAAC;EACrC;EAEA,MAAMU,UAAU,GAAGpB,GAAG,CAACK,EAAE,EAAE,SAASa,MAAM,WAAW,CAAC;EACtD,MAAMG,WAAW,GAAG;IAClBC,QAAQ,EAAEd,IAAI,CAACI,GAAG;IAClBO,OAAO;IACPI,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;EACtB,CAAC;EAED,MAAMxB,IAAI,CAACmB,UAAU,EAAEC,WAAW,CAAC;EACnCK,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;AAC9B,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACV,MAAc,EAAEX,QAA6B,KAAK;EAC9E,MAAMsB,YAAY,GAAG7B,GAAG,CAACK,EAAE,EAAE,SAASa,MAAM,YAAY,CAAC;;EAEzD;EACAhB,OAAO,CAAC2B,YAAY,EAAGf,QAAQ,IAAK;IAClC,MAAMgB,aAAa,GAAGhB,QAAQ,CAACE,GAAG,CAAC,CAAC;IACpC,IAAIc,aAAa,EAAE;MACjBvB,QAAQ,CAACuB,aAAa,CAAC,CAAC,CAAC;IAC3B;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAGA,CAACb,MAAc,EAAEX,QAAoB,KAAK;EACnE,MAAMyB,SAAS,GAAGhC,GAAG,CAACK,EAAE,EAAE,SAASa,MAAM,SAAS,CAAC;;EAEnD;EACAhB,OAAO,CAAC8B,SAAS,EAAGlB,QAAQ,IAAK;IAC/B,MAAMmB,MAAM,GAAGnB,QAAQ,CAACE,GAAG,CAAC,CAAC;IAC7B,IAAIiB,MAAM,KAAK,OAAO,EAAE;MACtB1B,QAAQ,CAAC,CAAC,CAAC,CAAC;IACd;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAM2B,qBAAqB,GAAG,MAAAA,CAAA,KAAY;EAC7C,MAAM1B,IAAI,GAAGJ,IAAI,CAACK,WAAW;EAC7B,IAAI,CAACD,IAAI,EAAE;IACT,MAAM,IAAIE,KAAK,CAAC,kBAAkB,CAAC;EACrC;EAEA,MAAMC,QAAQ,GAAGH,IAAI,CAACI,GAAG;EACzB,MAAMC,SAAS,GAAGb,GAAG,CAACK,EAAE,EAAE,iBAAiB,GAAGM,QAAQ,CAAC;EACvD,MAAMR,MAAM,CAACU,SAAS,CAAC,CAAC,CAAC;EACzBa,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;AACrC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}