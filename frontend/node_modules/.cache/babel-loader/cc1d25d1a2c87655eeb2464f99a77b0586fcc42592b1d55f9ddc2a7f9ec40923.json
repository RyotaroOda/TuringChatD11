{"ast":null,"code":"// frontend/src/services/firebase.ts\n// FRD = Firebase Realtime Database\nimport { ref, push, onValue, update, set } from \"firebase/database\";\nimport { database } from \"./firebase.ts\";\n// プレイヤー名を保存\nexport const savePlayerName = async (playerId, playerName) => {\n  const playerRef = ref(database, 'players/' + playerId);\n  await set(playerRef, {\n    playerName,\n    status: \"online\"\n  });\n  console.log(\"Player name saved:\", playerName);\n};\nexport const requestMatch = async playerId => {\n  const matchRef = ref(database, 'matches');\n  const newMatchRef = await push(matchRef, {\n    playerId,\n    status: \"waiting\"\n  });\n\n  // マッチングが成功したらルームIDを返す（仮実装）\n  const roomId = newMatchRef.key; // 新しいマッチのキーがルームIDとして使われる\n  await update(ref(database, 'rooms/' + roomId), {\n    player1: playerId\n  });\n  return roomId;\n};\n\n// メッセージを送信\nexport const sendMessage = async (roomId, message, playerId) => {\n  const messageRef = ref(database, `rooms/${roomId}/battleLog/messages`);\n  await push(messageRef, {\n    senderId: playerId,\n    message,\n    timestamp: Date.now()\n  });\n};\n\n// ターン更新リスナー\nexport const onTurnUpdated = (roomId, callback) => {\n  const turnRef = ref(database, `rooms/${roomId}/battleLog`);\n  onValue(turnRef, snapshot => {\n    const battleLog = snapshot.val();\n    callback({\n      battleLog\n    });\n  });\n};\n\n// バトル終了を監視\nexport const onBattleEnd = (roomId, callback) => {\n  const endRef = ref(database, `rooms/${roomId}/battleEnd`);\n  onValue(endRef, snapshot => {\n    if (snapshot.exists()) {\n      callback();\n    }\n  });\n};","map":{"version":3,"names":["ref","push","onValue","update","set","database","savePlayerName","playerId","playerName","playerRef","status","console","log","requestMatch","matchRef","newMatchRef","roomId","key","player1","sendMessage","message","messageRef","senderId","timestamp","Date","now","onTurnUpdated","callback","turnRef","snapshot","battleLog","val","onBattleEnd","endRef","exists"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/FRD.ts"],"sourcesContent":["// frontend/src/services/firebase.ts\n// FRD = Firebase Realtime Database\nimport { ref, push, onValue, update, set } from \"firebase/database\";\nimport { database } from \"./firebase.ts\"; \n\nimport { BattleLog } from \"../../../shared/types.ts\";\n\n// プレイヤー名を保存\nexport const savePlayerName = async (playerId: string, playerName: string) => {\n  const playerRef = ref(database, 'players/' + playerId);\n  await set(playerRef, {\n    playerName,\n    status: \"online\",\n  });\n  console.log(\"Player name saved:\", playerName);\n};\n\nexport const requestMatch = async (playerId: string): Promise<string> => {\n  const matchRef = ref(database, 'matches');\n  const newMatchRef = await push(matchRef, {\n    playerId,\n    status: \"waiting\",\n  });\n\n  // マッチングが成功したらルームIDを返す（仮実装）\n  const roomId = newMatchRef.key;  // 新しいマッチのキーがルームIDとして使われる\n  await update(ref(database, 'rooms/' + roomId), {\n    player1: playerId,\n  });\n\n  return roomId!;\n};\n\n// メッセージを送信\nexport const sendMessage = async (roomId: string, message: string, playerId: string) => {\n  const messageRef = ref(database, `rooms/${roomId}/battleLog/messages`);\n  await push(messageRef, {\n    senderId: playerId,\n    message,\n    timestamp: Date.now(),\n  });\n};\n\n// ターン更新リスナー\nexport const onTurnUpdated = (roomId: string, callback: (data: { battleLog: BattleLog }) => void) => {\n  const turnRef = ref(database, `rooms/${roomId}/battleLog`);\n  onValue(turnRef, (snapshot) => {\n    const battleLog = snapshot.val();\n    callback({ battleLog });\n  });\n};\n\n// バトル終了を監視\nexport const onBattleEnd = (roomId: string, callback: () => void) => {\n  const endRef = ref(database, `rooms/${roomId}/battleEnd`);\n  onValue(endRef, (snapshot) => {\n    if (snapshot.exists()) {\n      callback();\n    }\n  });\n};\n"],"mappings":"AAAA;AACA;AACA,SAASA,GAAG,EAAEC,IAAI,EAAEC,OAAO,EAAEC,MAAM,EAAEC,GAAG,QAAQ,mBAAmB;AACnE,SAASC,QAAQ,QAAQ,eAAe;AAIxC;AACA,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAAOC,QAAgB,EAAEC,UAAkB,KAAK;EAC5E,MAAMC,SAAS,GAAGT,GAAG,CAACK,QAAQ,EAAE,UAAU,GAAGE,QAAQ,CAAC;EACtD,MAAMH,GAAG,CAACK,SAAS,EAAE;IACnBD,UAAU;IACVE,MAAM,EAAE;EACV,CAAC,CAAC;EACFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEJ,UAAU,CAAC;AAC/C,CAAC;AAED,OAAO,MAAMK,YAAY,GAAG,MAAON,QAAgB,IAAsB;EACvE,MAAMO,QAAQ,GAAGd,GAAG,CAACK,QAAQ,EAAE,SAAS,CAAC;EACzC,MAAMU,WAAW,GAAG,MAAMd,IAAI,CAACa,QAAQ,EAAE;IACvCP,QAAQ;IACRG,MAAM,EAAE;EACV,CAAC,CAAC;;EAEF;EACA,MAAMM,MAAM,GAAGD,WAAW,CAACE,GAAG,CAAC,CAAE;EACjC,MAAMd,MAAM,CAACH,GAAG,CAACK,QAAQ,EAAE,QAAQ,GAAGW,MAAM,CAAC,EAAE;IAC7CE,OAAO,EAAEX;EACX,CAAC,CAAC;EAEF,OAAOS,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAG,MAAAA,CAAOH,MAAc,EAAEI,OAAe,EAAEb,QAAgB,KAAK;EACtF,MAAMc,UAAU,GAAGrB,GAAG,CAACK,QAAQ,EAAE,SAASW,MAAM,qBAAqB,CAAC;EACtE,MAAMf,IAAI,CAACoB,UAAU,EAAE;IACrBC,QAAQ,EAAEf,QAAQ;IAClBa,OAAO;IACPG,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;EACtB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACV,MAAc,EAAEW,QAAkD,KAAK;EACnG,MAAMC,OAAO,GAAG5B,GAAG,CAACK,QAAQ,EAAE,SAASW,MAAM,YAAY,CAAC;EAC1Dd,OAAO,CAAC0B,OAAO,EAAGC,QAAQ,IAAK;IAC7B,MAAMC,SAAS,GAAGD,QAAQ,CAACE,GAAG,CAAC,CAAC;IAChCJ,QAAQ,CAAC;MAAEG;IAAU,CAAC,CAAC;EACzB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAGA,CAAChB,MAAc,EAAEW,QAAoB,KAAK;EACnE,MAAMM,MAAM,GAAGjC,GAAG,CAACK,QAAQ,EAAE,SAASW,MAAM,YAAY,CAAC;EACzDd,OAAO,CAAC+B,MAAM,EAAGJ,QAAQ,IAAK;IAC5B,IAAIA,QAAQ,CAACK,MAAM,CAAC,CAAC,EAAE;MACrBP,QAAQ,CAAC,CAAC;IACZ;EACF,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}