{"ast":null,"code":"// services/firebase-functions-client.ts\nimport { httpsCallable } from \"firebase/functions\";\nimport { auth, functions } from \"./firebase_f.ts\"; // Firebase初期化ファイルをインポート\n\n//#region HomeView\n// サーバーレス関数を使ってマッチングリクエストを送信する関数\nexport const requestMatch = async (player, retryCount = 10) => {\n  const requestMatchFunction = httpsCallable(functions, \"requestMatchFunction\");\n  const TIMEOUT_DURATION = 60000; // 60秒待機してもマッチングしなければタイムアウト\n  let timeoutId;\n  let attempt = 0;\n  while (attempt < retryCount) {\n    attempt += 1;\n    try {\n      // マッチングリクエストを送信\n      const result = await new Promise((resolve, reject) => {\n        timeoutId = setTimeout(() => reject({\n          message: \"マッチングタイムアウト\"\n        }), TIMEOUT_DURATION);\n        requestMatchFunction(player).then(response => {\n          // マッチング成功時\n          clearTimeout(timeoutId); // タイムアウトをクリア\n          resolve(response.data);\n        }).catch(error => {\n          // マッチング失敗時\n          clearTimeout(timeoutId); // タイムアウトをクリア\n          reject({\n            message: error.message\n          });\n        });\n      });\n      console.log(\"マッチング成功:\", result);\n      return result;\n    } catch (error) {\n      if (attempt === retryCount) {\n        console.error(`タイムアウト!（試行${attempt}回目）:`, error);\n        return {\n          roomId: \"\",\n          startBattle: false,\n          message: `マッチングエラー（試行${attempt}回目）:`\n        };\n      }\n      console.error(`マッチングエラー?（試行${attempt}回目）:`, error);\n      if (attempt < retryCount) {\n        // Exponential Backoff (指数バックオフ)\n        await new Promise(resolve => setTimeout(resolve, Math.pow(2, attempt) * 1000));\n      } else {\n        return {\n          roomId: \"\",\n          startBattle: false,\n          message: `タイムアウト（試行${attempt}回目）:`\n        };\n      }\n    }\n  }\n  // 再試行失敗時の結果\n  return {\n    roomId: \"\",\n    startBattle: false,\n    message: \"再試行失敗\"\n  };\n};\n\n// サーバーレス関数を使ってマッチングキャンセルを行う関数\nexport const cancelRequest = async () => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const cancelMatchFunction = httpsCallable(functions, \"cancelMatchFunction\");\n  await cancelMatchFunction();\n};\n\n//#endregion\n\n//# region BattleView\nexport const calculateBattleResult = async roomId => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const calculateBattleResultFunction = httpsCallable(functions, \"calculateBattleResultFunction\");\n  console.log(\"calculating\");\n  await calculateBattleResultFunction(roomId);\n};\n//\n\n//#endregion","map":{"version":3,"names":["httpsCallable","auth","functions","requestMatch","player","retryCount","requestMatchFunction","TIMEOUT_DURATION","timeoutId","attempt","result","Promise","resolve","reject","setTimeout","message","then","response","clearTimeout","data","catch","error","console","log","roomId","startBattle","Math","pow","cancelRequest","user","currentUser","Error","cancelMatchFunction","calculateBattleResult","calculateBattleResultFunction"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase-functions-client.ts"],"sourcesContent":["// services/firebase-functions-client.ts\nimport { httpsCallable } from \"firebase/functions\";\nimport { auth, functions } from \"./firebase_f.ts\"; // Firebase初期化ファイルをインポート\nimport { PlayerData, MatchResult } from \"shared/dist/types\";\n\n//#region HomeView\n// サーバーレス関数を使ってマッチングリクエストを送信する関数\nexport const requestMatch = async (\n  player: PlayerData,\n  retryCount = 10\n): Promise<MatchResult> => {\n  const requestMatchFunction = httpsCallable(functions, \"requestMatchFunction\");\n\n  const TIMEOUT_DURATION = 60000; // 60秒待機してもマッチングしなければタイムアウト\n  let timeoutId;\n  let attempt = 0;\n\n  while (attempt < retryCount) {\n    attempt += 1;\n    try {\n      // マッチングリクエストを送信\n      const result: MatchResult = await new Promise((resolve, reject) => {\n        timeoutId = setTimeout(\n          () => reject({ message: \"マッチングタイムアウト\" }),\n          TIMEOUT_DURATION\n        );\n        requestMatchFunction(player)\n          .then((response) => {\n            // マッチング成功時\n            clearTimeout(timeoutId); // タイムアウトをクリア\n            resolve(response.data as MatchResult);\n          })\n          .catch((error) => {\n            // マッチング失敗時\n            clearTimeout(timeoutId); // タイムアウトをクリア\n            reject({ message: error.message });\n          });\n      });\n      console.log(\"マッチング成功:\", result);\n      return result;\n    } catch (error) {\n      if (attempt === retryCount) {\n        console.error(`タイムアウト!（試行${attempt}回目）:`, error);\n        return {\n          roomId: \"\",\n          startBattle: false,\n          message: `マッチングエラー（試行${attempt}回目）:`,\n        };\n      }\n      console.error(`マッチングエラー?（試行${attempt}回目）:`, error);\n      if (attempt < retryCount) {\n        // Exponential Backoff (指数バックオフ)\n        await new Promise((resolve) =>\n          setTimeout(resolve, Math.pow(2, attempt) * 1000)\n        );\n      } else {\n        return {\n          roomId: \"\",\n          startBattle: false,\n          message: `タイムアウト（試行${attempt}回目）:`,\n        };\n      }\n    }\n  }\n  // 再試行失敗時の結果\n  return {\n    roomId: \"\",\n    startBattle: false,\n    message: \"再試行失敗\",\n  };\n};\n\n// サーバーレス関数を使ってマッチングキャンセルを行う関数\nexport const cancelRequest = async () => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const cancelMatchFunction = httpsCallable(functions, \"cancelMatchFunction\");\n  await cancelMatchFunction();\n};\n\n//#endregion\n\n//# region BattleView\nexport const calculateBattleResult = async (roomId: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const calculateBattleResultFunction = httpsCallable(\n    functions,\n    \"calculateBattleResultFunction\"\n  );\n  console.log(\"calculating\");\n  await calculateBattleResultFunction(roomId);\n};\n//\n\n//#endregion\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}