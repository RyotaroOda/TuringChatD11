{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{Link,useLocation,useParams}from\"react-router-dom\";import{sendMessage,onMessageAdded,onBattleEnd}from\"../services/firebase-realtime-database.ts\";import{useAuth}from\"../services/useAuth.tsx\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BattleView=()=>{//#region init\nconst[isViewLoaded,setIsLoaded]=useState(false);const{roomId}=useParams();const{user}=useAuth();const myId=(user===null||user===void 0?void 0:user.uid)||\"error\";// Location and Params\nconst location=useLocation();const state=location.state.roomData;const isHost=myId===state.players[0].id;const myData=isHost?state.players[0]:state.players[1];const opponentData=isHost?state.players[1]:state.players[1];// Player Information\nconst myName=`${myData.name} (あなた)`||\"error\";// Battle Configuration\nconst battleConfig=state.battleConfig;const[remainingTime,setRemainingTime]=useState(battleConfig.oneTurnTime);//#endregion\nuseEffect(()=>{console.log(\"battle view load complete\",isHost);setIsLoaded(true);},[battleConfig]);// Player names mapping\nconst playerNames={[myId]:myName,[opponentData.id]:opponentData.name};const[chatLog,setChatLog]=useState([]);const[message,setMessage]=useState(\"\");const[isMyTurn,setIsMyTurn]=useState(isHost);// Initial turn state (placeholder)\nconst[turnCount,setTurnCount]=useState(0);// ゲームの進行状況を監視する\nuseEffect(()=>{if(roomId&&isViewLoaded){// ターン更新をFirebaseから受け取る\nonMessageAdded(roomId,newMessage=>{console.log(\"onMessageAdded:\",newMessage);setIsMyTurn(!isMyTurn);setTurnCount(turnCount+1);setChatLog(prevChatLog=>[...prevChatLog,{senderId:newMessage.senderId,message:newMessage.message}]);if(message===\"送信中...\")setMessage(\"\");});}},[roomId]);// バトル終了の監視\nuseEffect(()=>{if(roomId){onBattleEnd(roomId,()=>{alert(\"Battle Ended!\");});}},[roomId]);const handleSendMessage=async()=>{if(message.trim()&&isMyTurn&&roomId){await sendMessage(roomId,message);setMessage(\"送信中...\");setIsMyTurn(false);}};const handleFinishMatching=()=>{console.log(\"Finishing battle...\");// バトル終了のロジック\n};//html\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u5BFE\\u6226\\u753B\\u9762\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u30EB\\u30FC\\u30E0ID: \",roomId]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\u30C1\\u30E3\\u30C3\\u30C8\\u30ED\\u30B0\"}),/*#__PURE__*/_jsx(\"ul\",{children:chatLog.map((msg,index)=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[playerNames[msg.senderId]||\"Unknown\",\":\"]}),\" \",msg.message]},index))})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u6B8B\\u308A\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u6570: \",battleConfig.maxTurn-turnCount]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u3053\\u306E\\u30BF\\u30FC\\u30F3\\u306E\\u6B8B\\u308A\\u6642\\u9593: \",remainingTime,\"\\u79D2\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u30BF\\u30FC\\u30F3\\u30D7\\u30EC\\u30FC\\u30E4\\u30FC: \",isMyTurn?\"あなた\":\"相手\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u76F8\\u624B: \",opponentData.name]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Enter message\",value:message,onChange:e=>setMessage(e.target.value)})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSendMessage,disabled:!isMyTurn,children:isMyTurn?\"送信\":\"Wait for your turn\"})]}),/*#__PURE__*/_jsx(Link,{to:\"/result\",children:/*#__PURE__*/_jsx(\"button\",{onClick:handleFinishMatching,children:\"\\u30D0\\u30C8\\u30EB\\u7D42\\u4E86\"})})]});};export default BattleView;","map":{"version":3,"names":["React","useState","useEffect","Link","useLocation","useParams","sendMessage","onMessageAdded","onBattleEnd","useAuth","jsx","_jsx","jsxs","_jsxs","BattleView","isViewLoaded","setIsLoaded","roomId","user","myId","uid","location","state","roomData","isHost","players","id","myData","opponentData","myName","name","battleConfig","remainingTime","setRemainingTime","oneTurnTime","console","log","playerNames","chatLog","setChatLog","message","setMessage","isMyTurn","setIsMyTurn","turnCount","setTurnCount","newMessage","prevChatLog","senderId","alert","handleSendMessage","trim","handleFinishMatching","children","map","msg","index","maxTurn","type","placeholder","value","onChange","e","target","onClick","disabled","to"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/views/BattleView.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useLocation, useParams } from \"react-router-dom\";\nimport {\n  sendMessage,\n  onMessageAdded,\n  onBattleEnd,\n} from \"../services/firebase-realtime-database.ts\";\nimport { BattleLog, PlayerData, RoomData } from \"shared/dist/types\";\nimport { useAuth } from \"../services/useAuth.tsx\";\n\nconst BattleView: React.FC = () => {\n  //#region init\n  const [isViewLoaded, setIsLoaded] = useState<boolean>(false);\n  const { roomId } = useParams<{ roomId: string }>();\n\n  const { user } = useAuth();\n  const myId = user?.uid || \"error\";\n\n  // Location and Params\n  const location = useLocation();\n  const state: RoomData = location.state.roomData;\n  const isHost = myId === state.players[0].id;\n  const myData: PlayerData = isHost ? state.players[0] : state.players[1];\n  const opponentData: PlayerData = isHost ? state.players[1] : state.players[1];\n\n  // Player Information\n  const myName = `${myData.name} (あなた)` || \"error\";\n\n  // Battle Configuration\n  const battleConfig = state.battleConfig;\n  const [remainingTime, setRemainingTime] = useState<number>(\n    battleConfig.oneTurnTime\n  );\n  //#endregion\n\n  useEffect(() => {\n    console.log(\"battle view load complete\", isHost);\n    setIsLoaded(true);\n  }, [battleConfig]);\n\n  // Player names mapping\n  const playerNames: Record<string, string> = {\n    [myId]: myName,\n    [opponentData.id]: opponentData.name,\n  };\n  const [chatLog, setChatLog] = useState<\n    { senderId: string; message: string }[]\n  >([]);\n  const [message, setMessage] = useState<string>(\"\");\n  const [isMyTurn, setIsMyTurn] = useState<boolean>(isHost); // Initial turn state (placeholder)\n  const [turnCount, setTurnCount] = useState<number>(0);\n\n  // ゲームの進行状況を監視する\n  useEffect(() => {\n    if (roomId && isViewLoaded) {\n      // ターン更新をFirebaseから受け取る\n      onMessageAdded(roomId, (newMessage) => {\n        console.log(\"onMessageAdded:\", newMessage);\n        setIsMyTurn(!isMyTurn);\n        setTurnCount(turnCount + 1);\n\n        setChatLog((prevChatLog) => [\n          ...prevChatLog,\n          { senderId: newMessage.senderId, message: newMessage.message },\n        ]);\n        if (message === \"送信中...\") setMessage(\"\");\n      });\n    }\n  }, [roomId]);\n\n  // バトル終了の監視\n  useEffect(() => {\n    if (roomId) {\n      onBattleEnd(roomId, () => {\n        alert(\"Battle Ended!\");\n      });\n    }\n  }, [roomId]);\n\n  const handleSendMessage = async () => {\n    if (message.trim() && isMyTurn && roomId) {\n      await sendMessage(roomId, message);\n      setMessage(\"送信中...\");\n      setIsMyTurn(false);\n    }\n  };\n\n  const handleFinishMatching = () => {\n    console.log(\"Finishing battle...\");\n    // バトル終了のロジック\n  };\n\n  //html\n  return (\n    <div>\n      <h1>対戦画面</h1>\n      <p>ルームID: {roomId}</p>\n      <div>\n        <h2>チャットログ</h2>\n        <ul>\n          {chatLog.map((msg, index) => (\n            <li key={index}>\n              <strong>{playerNames[msg.senderId] || \"Unknown\"}:</strong>{\" \"}\n              {msg.message}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <p>残りメッセージ数: {battleConfig.maxTurn - turnCount}</p>\n      <p>このターンの残り時間: {remainingTime}秒</p>\n      <p>ターンプレーヤー: {isMyTurn ? \"あなた\" : \"相手\"}</p>\n      <p>相手: {opponentData.name}</p>\n      <div>\n        <label>\n          メッセージ:\n          <input\n            type=\"text\"\n            placeholder=\"Enter message\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n        </label>\n        <button onClick={handleSendMessage} disabled={!isMyTurn}>\n          {isMyTurn ? \"送信\" : \"Wait for your turn\"}\n        </button>\n      </div>\n      <Link to=\"/result\">\n        <button onClick={handleFinishMatching}>バトル終了</button>\n      </Link>\n    </div>\n  );\n};\n\nexport default BattleView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}