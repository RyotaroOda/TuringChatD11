{"ast":null,"code":"import { ref, push, set, onValue, remove } from \"firebase/database\";\nimport { auth } from \"./firebase\"; // Firebaseの認証インスタンスをインポート\n\n// Firebase Functions呼び出し\nimport { db } from \"./firebase\"; // Firebase初期化ファイルからデータベースをインポート\n\n// マッチングリクエストを行う関数\nexport const requestMatch = async () => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const playerId = user.uid;\n  const playerRating = Math.floor(Math.random() * 1000); // 仮のレーティングを生成（本番ではユーザーの実際のスキルに基づく）\n\n  // プレイヤー情報を待機中のプレイヤーリストに追加\n  const playerData = {\n    id: playerId,\n    rating: playerRating,\n    timeWaiting: Date.now()\n  };\n  const waitingPlayersRef = ref(db, \"waitingPlayers/\" + playerId);\n  await set(waitingPlayersRef, playerData);\n  console.log(\"プレイヤーを待機リストに追加しました。プレイヤーID:\", playerId);\n};\n\n// マッチングが成立したらコールバックを実行するリスナー\nexport const onMatchFound = callback => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const playerId = user.uid;\n  const playerRef = ref(db, \"players/\" + playerId + \"/match\");\n\n  // プレイヤーのマッチング情報を監視\n  onValue(playerRef, snapshot => {\n    const matchData = snapshot.val();\n    if (matchData) {\n      callback(matchData); // マッチングが見つかればコールバックを実行\n    }\n  });\n};\n\n// メッセージを送信する関数\nexport const sendMessage = async (roomId, message) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const messageRef = ref(db, `rooms/${roomId}/messages`);\n  const messageData = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now()\n  };\n  await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\");\n};\n\n// バトルログの更新を監視するリスナー\nexport const onTurnUpdated = (roomId, callback) => {\n  const battleLogRef = ref(db, `rooms/${roomId}/battleLog`);\n\n  // バトルログの更新をリアルタイムで監視\n  onValue(battleLogRef, snapshot => {\n    const battleLogData = snapshot.val();\n    if (battleLogData) {\n      callback(battleLogData); // バトルログが更新されたらコールバックを実行\n    }\n  });\n};\n\n// バトル終了を監視するリスナー\nexport const onBattleEnd = (roomId, callback) => {\n  const statusRef = ref(db, `rooms/${roomId}/status`);\n\n  // バトルの終了を監視\n  onValue(statusRef, snapshot => {\n    const status = snapshot.val();\n    if (status === \"ended\") {\n      callback(); // バトルが終了したらコールバックを実行\n    }\n  });\n};\n\n// マッチングが完了したら待機リストから削除\nexport const removeFromWaitingList = async () => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const playerId = user.uid;\n  const playerRef = ref(db, \"waitingPlayers/\" + playerId);\n  await remove(playerRef);\n  console.log(\"プレイヤーを待機リストから削除しました。\");\n};","map":{"version":3,"names":["ref","push","set","onValue","remove","auth","db","requestMatch","user","currentUser","Error","playerId","uid","playerRating","Math","floor","random","playerData","id","rating","timeWaiting","Date","now","waitingPlayersRef","console","log","onMatchFound","callback","playerRef","snapshot","matchData","val","sendMessage","roomId","message","messageRef","messageData","senderId","timestamp","onTurnUpdated","battleLogRef","battleLogData","onBattleEnd","statusRef","status","removeFromWaitingList"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase-realtime-database.ts"],"sourcesContent":["\nimport { getDatabase, ref, push, set, update, onValue, remove } from \"firebase/database\";\nimport { auth } from \"./firebase\"; // Firebaseの認証インスタンスをインポート\nimport { getFunctions, httpsCallable } from \"firebase/functions\"; // Firebase Functions呼び出し\nimport { db } from \"./firebase\"; // Firebase初期化ファイルからデータベースをインポート\n\n// マッチングリクエストを行う関数\nexport const requestMatch = async () => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const playerId = user.uid;\n  const playerRating = Math.floor(Math.random() * 1000); // 仮のレーティングを生成（本番ではユーザーの実際のスキルに基づく）\n\n  // プレイヤー情報を待機中のプレイヤーリストに追加\n  const playerData = {\n    id: playerId,\n    rating: playerRating,\n    timeWaiting: Date.now(),\n  };\n\n  const waitingPlayersRef = ref(db, \"waitingPlayers/\" + playerId);\n  await set(waitingPlayersRef, playerData);\n\n  console.log(\"プレイヤーを待機リストに追加しました。プレイヤーID:\", playerId);\n};\n\n// マッチングが成立したらコールバックを実行するリスナー\nexport const onMatchFound = (callback: (data: any) => void) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const playerId = user.uid;\n  const playerRef = ref(db, \"players/\" + playerId + \"/match\");\n  \n  // プレイヤーのマッチング情報を監視\n  onValue(playerRef, (snapshot) => {\n    const matchData = snapshot.val();\n    if (matchData) {\n      callback(matchData); // マッチングが見つかればコールバックを実行\n    }\n  });\n};\n\n// メッセージを送信する関数\nexport const sendMessage = async (roomId: string, message: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const messageRef = ref(db, `rooms/${roomId}/messages`);\n  const messageData = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now(),\n  };\n\n  await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\");\n};\n\n// バトルログの更新を監視するリスナー\nexport const onTurnUpdated = (roomId: string, callback: (data: any) => void) => {\n  const battleLogRef = ref(db, `rooms/${roomId}/battleLog`);\n  \n  // バトルログの更新をリアルタイムで監視\n  onValue(battleLogRef, (snapshot) => {\n    const battleLogData = snapshot.val();\n    if (battleLogData) {\n      callback(battleLogData); // バトルログが更新されたらコールバックを実行\n    }\n  });\n};\n\n// バトル終了を監視するリスナー\nexport const onBattleEnd = (roomId: string, callback: () => void) => {\n  const statusRef = ref(db, `rooms/${roomId}/status`);\n  \n  // バトルの終了を監視\n  onValue(statusRef, (snapshot) => {\n    const status = snapshot.val();\n    if (status === \"ended\") {\n      callback(); // バトルが終了したらコールバックを実行\n    }\n  });\n};\n\n// マッチングが完了したら待機リストから削除\nexport const removeFromWaitingList = async () => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const playerId = user.uid;\n  const playerRef = ref(db, \"waitingPlayers/\" + playerId);\n  await remove(playerRef);\n  console.log(\"プレイヤーを待機リストから削除しました。\");\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}