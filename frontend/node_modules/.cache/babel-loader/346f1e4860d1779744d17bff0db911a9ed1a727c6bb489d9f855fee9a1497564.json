{"ast":null,"code":"import{initializeApp}from\"firebase/app\";import{getDatabase}from\"firebase/database\";import{getAuth,signInAnonymously}from\"firebase/auth\";import{getFunctions,connectFunctionsEmulator}from\"firebase/functions\";// フロントエンド用にREACT_APP_プレフィックスをつけた環境変数を使う\nconst firebaseConfig={apiKey:process.env.REACT_APP_FIREBASE_API_KEY,authDomain:process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,databaseURL:process.env.REACT_APP_FIREBASE_DATABASE_URL,projectId:process.env.REACT_APP_FIREBASE_PROJECT_ID,storageBucket:process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,messagingSenderId:process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,appId:process.env.REACT_APP_FIREBASE_APP_ID};// Firebaseアプリを初期化\nconst app=initializeApp(firebaseConfig);// Realtime Databaseインスタンスを作成\nexport const db=getDatabase(app);// Firebase Authenticationのインスタンスを作成\nexport const auth=getAuth(app);// Firebase Functionsのインスタンスを作成\nexport const functions=getFunctions(app);// 匿名認証を行う関数\nexport const signInAnonymouslyUser=()=>{return signInAnonymously(auth).then(userCredential=>{// 認証に成功した場合の処理\nconsole.log(\"Signed in anonymously:\",userCredential.user);}).catch(error=>{// 認証に失敗した場合の処理\nconsole.error(\"Anonymous sign-in failed:\",error);});};// ローカル開発用エミュレーターの接続設定\nif(window.location.hostname===\"localhost\"){// Functionsエミュレーター\nconnectFunctionsEmulator(functions,\"127.0.0.1\",5001);// ポートはエミュレータのポートに合わせる\nconsole.log(\"Functions emulator connected\",functions);// #region testFunction\n// const testFunction = httpsCallable(functions, \"testFunction\");\n// console.log(\"testFunction\", testFunction);\n// try {\n//   const result = await testFunction();\n//   console.log(\"Function result:\", result.data);\n// } catch (error) {\n//   console.error(\"Error calling test function:\", error);\n// }\n// console.log(\"testFunction fin\");\n//#endregion\n}//#region testGetData\n// test_dataを取得する関数\n// export const getTestData = async (): Promise<any> => {\n//   try {\n//     const dbRef = ref(db); // データベースのルートを参照\n//     const snapshot = await get(child(dbRef, \"test_data\")); // test_dataノードを取得\n//     if (snapshot.exists()) {\n//       return snapshot.val(); // データが存在する場合、その値を返す\n//     } else {\n//       console.error(\"データが存在しません\");\n//       return null; // データが存在しない場合はnullを返す\n//     }\n//   } catch (error) {\n//     console.error(\"データの取得に失敗しました:\", error);\n//     throw error; // エラーが発生した場合は例外を投げる\n//   }\n// };\n// try {\n//   const result = getTestData();\n//   console.log(\"result:\", result);\n// } catch (error) {\n//   console.error(\"Error calling getTestData:\", error);\n// }\n//#endregion","map":{"version":3,"names":["initializeApp","getDatabase","getAuth","signInAnonymously","getFunctions","connectFunctionsEmulator","firebaseConfig","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGE_BUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_FIREBASE_APP_ID","app","db","auth","functions","signInAnonymouslyUser","then","userCredential","console","log","user","catch","error","window","location","hostname"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase_f.ts"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport { child, get, getDatabase, ref } from \"firebase/database\";\nimport { getAuth, signInAnonymously } from \"firebase/auth\";\nimport {\n  getFunctions,\n  connectFunctionsEmulator,\n  httpsCallable,\n} from \"firebase/functions\";\n\n// フロントエンド用にREACT_APP_プレフィックスをつけた環境変数を使う\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n};\n\n// Firebaseアプリを初期化\nconst app = initializeApp(firebaseConfig);\n\n// Realtime Databaseインスタンスを作成\nexport const db = getDatabase(app);\n\n// Firebase Authenticationのインスタンスを作成\nexport const auth = getAuth(app);\n\n// Firebase Functionsのインスタンスを作成\nexport const functions = getFunctions(app);\n\n// 匿名認証を行う関数\nexport const signInAnonymouslyUser = () => {\n  return signInAnonymously(auth)\n    .then((userCredential) => {\n      // 認証に成功した場合の処理\n      console.log(\"Signed in anonymously:\", userCredential.user);\n    })\n    .catch((error) => {\n      // 認証に失敗した場合の処理\n      console.error(\"Anonymous sign-in failed:\", error);\n    });\n};\n\n// ローカル開発用エミュレーターの接続設定\nif (window.location.hostname === \"localhost\") {\n  // Functionsエミュレーター\n  connectFunctionsEmulator(functions, \"127.0.0.1\", 5001); // ポートはエミュレータのポートに合わせる\n  console.log(\"Functions emulator connected\", functions);\n\n  // #region testFunction\n  // const testFunction = httpsCallable(functions, \"testFunction\");\n  // console.log(\"testFunction\", testFunction);\n  // try {\n  //   const result = await testFunction();\n  //   console.log(\"Function result:\", result.data);\n  // } catch (error) {\n  //   console.error(\"Error calling test function:\", error);\n  // }\n\n  // console.log(\"testFunction fin\");\n  //#endregion\n}\n\n//#region testGetData\n// test_dataを取得する関数\n// export const getTestData = async (): Promise<any> => {\n//   try {\n//     const dbRef = ref(db); // データベースのルートを参照\n//     const snapshot = await get(child(dbRef, \"test_data\")); // test_dataノードを取得\n\n//     if (snapshot.exists()) {\n//       return snapshot.val(); // データが存在する場合、その値を返す\n//     } else {\n//       console.error(\"データが存在しません\");\n//       return null; // データが存在しない場合はnullを返す\n//     }\n//   } catch (error) {\n//     console.error(\"データの取得に失敗しました:\", error);\n//     throw error; // エラーが発生した場合は例外を投げる\n//   }\n// };\n// try {\n//   const result = getTestData();\n//   console.log(\"result:\", result);\n// } catch (error) {\n//   console.error(\"Error calling getTestData:\", error);\n// }\n//#endregion\n"],"mappings":"AAAA,OAASA,aAAa,KAAQ,cAAc,CAC5C,OAAqBC,WAAW,KAAa,mBAAmB,CAChE,OAASC,OAAO,CAAEC,iBAAiB,KAAQ,eAAe,CAC1D,OACEC,YAAY,CACZC,wBAAwB,KAEnB,oBAAoB,CAE3B;AACA,KAAM,CAAAC,cAAc,CAAG,CACrBC,MAAM,CAAEC,OAAO,CAACC,GAAG,CAACC,0BAA0B,CAC9CC,UAAU,CAAEH,OAAO,CAACC,GAAG,CAACG,8BAA8B,CACtDC,WAAW,CAAEL,OAAO,CAACC,GAAG,CAACK,+BAA+B,CACxDC,SAAS,CAAEP,OAAO,CAACC,GAAG,CAACO,6BAA6B,CACpDC,aAAa,CAAET,OAAO,CAACC,GAAG,CAACS,iCAAiC,CAC5DC,iBAAiB,CAAEX,OAAO,CAACC,GAAG,CAACW,sCAAsC,CACrEC,KAAK,CAAEb,OAAO,CAACC,GAAG,CAACa,yBACrB,CAAC,CAED;AACA,KAAM,CAAAC,GAAG,CAAGvB,aAAa,CAACM,cAAc,CAAC,CAEzC;AACA,MAAO,MAAM,CAAAkB,EAAE,CAAGvB,WAAW,CAACsB,GAAG,CAAC,CAElC;AACA,MAAO,MAAM,CAAAE,IAAI,CAAGvB,OAAO,CAACqB,GAAG,CAAC,CAEhC;AACA,MAAO,MAAM,CAAAG,SAAS,CAAGtB,YAAY,CAACmB,GAAG,CAAC,CAE1C;AACA,MAAO,MAAM,CAAAI,qBAAqB,CAAGA,CAAA,GAAM,CACzC,MAAO,CAAAxB,iBAAiB,CAACsB,IAAI,CAAC,CAC3BG,IAAI,CAAEC,cAAc,EAAK,CACxB;AACAC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAEF,cAAc,CAACG,IAAI,CAAC,CAC5D,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,EAAK,CAChB;AACAJ,OAAO,CAACI,KAAK,CAAC,2BAA2B,CAAEA,KAAK,CAAC,CACnD,CAAC,CAAC,CACN,CAAC,CAED;AACA,GAAIC,MAAM,CAACC,QAAQ,CAACC,QAAQ,GAAK,WAAW,CAAE,CAC5C;AACAhC,wBAAwB,CAACqB,SAAS,CAAE,WAAW,CAAE,IAAI,CAAC,CAAE;AACxDI,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAEL,SAAS,CAAC,CAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACF,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}