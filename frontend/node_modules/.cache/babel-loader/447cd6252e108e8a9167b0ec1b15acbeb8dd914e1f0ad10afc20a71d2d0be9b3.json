{"ast":null,"code":"import{ref,push,get,onValue,onChildAdded,off}from\"firebase/database\";import{auth}from\"./firebase_f.ts\";// Firebaseの認証インスタンスをインポート\nimport{db}from\"./firebase_f.ts\";// Firebase初期化ファイルからデータベースをインポート\nimport{DATABASE_PATHS}from\"shared/src/database-paths.ts\";import{calculateBattleResult}from\"./firebase-functions-client.ts\";//#region HomeView\n// プレイヤーデータを監視\nexport const onRoomPlayersUpdated=(roomId,callback,stop)=>{const playersRef=ref(db,DATABASE_PATHS.players(roomId));const listener=onValue(playersRef,snapshot=>{if(stop.current){// `stop` が `true` の場合、リスナーを解除して終了\noff(playersRef,\"value\",listener);console.log(\"リスナーが解除されました\");return;}const PlayerData=snapshot.val();// RoomData型にキャスト\nif(PlayerData){console.log(\"プレイヤーデータが更新されました。\",PlayerData);callback(PlayerData);// データがある場合はコールバックを呼び出す\n}else{console.error(\"ルームが存在しません。\");callback(null);}},error=>{console.error(\"ルームデータの監視中にエラーが発生しました:\",error);callback(null);});return()=>{console.log(\"off onRoomPlayersUpdated\");off(playersRef,\"value\",listener);};};// export const stopOnRoomPlayers = (roomId: string) => {\n//     const roomRef = ref(db, DATABASE_PATHS.rooms(roomId));\n//   off(roomRef);\n//   console.log(\"addPlayerの監視を停止しました。\");\n// };\n// ルームのデータを監視\nexport const onRoomUpdate=(roomId,callback,stop)=>{const roomRef=ref(db,DATABASE_PATHS.room(roomId));const listener=onValue(roomRef,snapshot=>{if(stop.current){off(roomRef,\"value\",listener);console.log(\"リスナーが解除されました111\");return;}const roomData=snapshot.val();// RoomData型にキャスト\nif(roomData){console.log(\"ルームデータが更新されました。\",roomData);callback(roomData);// データがある場合はコールバックを呼び出す\n}else{console.error(\"ルームが存在しません。\");callback(null);}},error=>{console.error(\"ルームデータの監視中にエラーが発生しました:\",error);callback(null);});return()=>{console.log(\"リスナーが解除されました222\");off(roomRef,\"value\",listener);};};// ルームデータを取得する関数\nexport const getRoomData=async roomId=>{try{const roomRef=ref(db,DATABASE_PATHS.room(roomId));const snapshot=await get(roomRef);if(snapshot.exists()){const roomData=snapshot.val();console.log(\"ルームデータを取得しました:\",roomData);return roomData;// RoomData型にキャストして返す\n}else{console.error(\"ルームが存在しません\");return null;}}catch(error){console.error(\"ルームデータの取得に失敗しました:\",error);return null;}};//#endregion\n//#region BattleView\n//#region メッセージ\n// メッセージを送信する関数\nexport const sendMessage=async(roomId,message)=>{const user=auth.currentUser;if(!user){throw new Error(\"ログインしていないユーザーです。\");}const messageRef=ref(db,DATABASE_PATHS.messages(roomId));console.log(\"メッセージ:\",message);const messageData={senderId:user.uid,message,timestamp:Date.now()};https:await push(messageRef,messageData);console.log(\"メッセージを送信しました。\",messageData);};export const onMessageAdded=(roomId,callback)=>{// メッセージリストの参照\nconst messagesRef=ref(db,DATABASE_PATHS.messages(roomId));// メッセージが追加されたときの監視\nonChildAdded(messagesRef,snapshot=>{const newMessage=snapshot.val();console.log(\"メッセージが追加されました。\",newMessage);callback(newMessage);// 新しいメッセージをコールバックで返す\n});};//#endregion\n//#region バトル終了時\n// 回答を送信する関数\nexport const sendAnswer=async(roomId,answer)=>{const user=auth.currentUser;if(!user){throw new Error(\"ログインしていないユーザーです。\");}const answerRef=ref(db,DATABASE_PATHS.submittedAnswers(roomId));await push(answerRef,answer);console.log(\"回答を送信しました。\",answer);};// 両プレイヤーの回答が揃ったらサーバーレス関数でスコア計算する\nexport const checkAnswers=roomId=>{const user=auth.currentUser;if(!user){throw new Error(\"ログインしていないユーザーです。\");}// メッセージリストの参照\nconst answerRef=ref(db,DATABASE_PATHS.submittedAnswers(roomId));// 両プレイヤーの選択が揃ったか確認\nget(answerRef).then(answersSnapshot=>{if(Object.keys(answersSnapshot.val()).length==2){console.log(\"両プレイヤーの回答が揃いました。\",answersSnapshot.val());calculateBattleResult(roomId);//awaitしない\n}else{// 要素数が2未満の場合、リスナーを設定して監視\nonValue(answerRef,snapshot=>{const updatedData=snapshot.val();const updatedCount=updatedData?Object.keys(updatedData).length:0;// 2つになったタイミングで `func()` を実行し、リスナーを解除\nif(updatedCount>=2){calculateBattleResult(roomId);//awaitしない\noff(answerRef);// リスナーを解除\nconsole.log(\"off checkAnswers\");}});}}).catch(error=>{console.error(\"回答の確認中にエラーが発生しました:\",error);});};//resultが更新されたらバトル終了\nexport const onResultUpdated=(roomId,playerNumber,callback)=>{const resultRef=ref(db,DATABASE_PATHS.result(roomId));const listener=onValue(resultRef,snapshot=>{const serverData=snapshot.val();// RoomData型にキャスト\nif(serverData){var _auth$currentUser;console.log(\"バトル結果が更新されました。\",serverData);const result={playerId:((_auth$currentUser=auth.currentUser)===null||_auth$currentUser===void 0?void 0:_auth$currentUser.uid)||\"\",myAnswer:serverData.answers[playerNumber],opponentAnswer:playerNumber===0?serverData.answers[1]:serverData.answers[0],corrects:serverData.corrects,win:playerNumber===0?serverData.scores[0]>serverData.scores[1]?\"win\":serverData.scores[0]<serverData.scores[1]?\"lose\":\"draw\":serverData.scores[1]>serverData.scores[0]?\"win\":serverData.scores[1]<serverData.scores[0]?\"lose\":\"draw\",score:playerNumber===0?serverData.scores[0]:serverData.scores[1],time:serverData.time};callback(result);}else{console.log(\"no result data\");callback(null);}},error=>{console.error(\"ルームデータの監視中にエラーが発生しました:\",error);callback(null);});return()=>{console.log(\"off onResultUpdated\");off(resultRef,\"value\",listener);};};//#endregion","map":{"version":3,"names":["ref","push","get","onValue","onChildAdded","off","auth","db","DATABASE_PATHS","calculateBattleResult","onRoomPlayersUpdated","roomId","callback","stop","playersRef","players","listener","snapshot","current","console","log","PlayerData","val","error","onRoomUpdate","roomRef","room","roomData","getRoomData","exists","sendMessage","message","user","currentUser","Error","messageRef","messages","messageData","senderId","uid","timestamp","Date","now","https","onMessageAdded","messagesRef","newMessage","sendAnswer","answer","answerRef","submittedAnswers","checkAnswers","then","answersSnapshot","Object","keys","length","updatedData","updatedCount","catch","onResultUpdated","playerNumber","resultRef","result","serverData","_auth$currentUser","playerId","myAnswer","answers","opponentAnswer","corrects","win","scores","score","time"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase-realtime-database.ts"],"sourcesContent":["import {\n  ref,\n  push,\n  get,\n  onValue,\n  remove,\n  child,\n  onChildAdded,\n  off,\n} from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\nimport {\n  BattleLog,\n  BattleResult,\n  Message,\n  PlayerData,\n  ResultData,\n  RoomData,\n  SubmitAnswer,\n} from \"shared/dist/types\";\nimport { DATABASE_PATHS } from \"shared/src/database-paths.ts\";\nimport { calculateBattleResult } from \"./firebase-functions-client.ts\";\n//#region HomeView\n// プレイヤーデータを監視\nexport const onRoomPlayersUpdated = (\n  roomId: string,\n  callback: (players: PlayerData[] | null) => void,\n  stop: { current: boolean }\n) => {\n  const playersRef = ref(db, DATABASE_PATHS.players(roomId));\n  const listener = onValue(\n    playersRef,\n    (snapshot) => {\n      if (stop.current) {\n        // `stop` が `true` の場合、リスナーを解除して終了\n        off(playersRef, \"value\", listener);\n        console.log(\"リスナーが解除されました\");\n        return;\n      }\n      const PlayerData = snapshot.val() as PlayerData[] | null; // RoomData型にキャスト\n      if (PlayerData) {\n        console.log(\"プレイヤーデータが更新されました。\", PlayerData);\n        callback(PlayerData); // データがある場合はコールバックを呼び出す\n      } else {\n        console.error(\"ルームが存在しません。\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n\n  return () => {\n    console.log(\"off onRoomPlayersUpdated\");\n    off(playersRef, \"value\", listener);\n  };\n};\n\n// export const stopOnRoomPlayers = (roomId: string) => {\n//     const roomRef = ref(db, DATABASE_PATHS.rooms(roomId));\n//   off(roomRef);\n//   console.log(\"addPlayerの監視を停止しました。\");\n// };\n\n// ルームのデータを監視\nexport const onRoomUpdate = (\n  roomId: string,\n  callback: (roomData: RoomData | null) => void,\n  stop: { current: boolean }\n) => {\n  const roomRef = ref(db, DATABASE_PATHS.room(roomId));\n  const listener = onValue(\n    roomRef,\n    (snapshot) => {\n      if (stop.current) {\n        off(roomRef, \"value\", listener);\n        console.log(\"リスナーが解除されました111\");\n        return;\n      }\n      const roomData = snapshot.val() as RoomData | null; // RoomData型にキャスト\n      if (roomData) {\n        console.log(\"ルームデータが更新されました。\", roomData);\n        callback(roomData); // データがある場合はコールバックを呼び出す\n      } else {\n        console.error(\"ルームが存在しません。\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n  return () => {\n    console.log(\"リスナーが解除されました222\");\n    off(roomRef, \"value\", listener);\n  };\n};\n\n// ルームデータを取得する関数\nexport const getRoomData = async (roomId: string): Promise<RoomData | null> => {\n  try {\n    const roomRef = ref(db, DATABASE_PATHS.room(roomId));\n    const snapshot = await get(roomRef);\n\n    if (snapshot.exists()) {\n      const roomData = snapshot.val();\n      console.log(\"ルームデータを取得しました:\", roomData);\n      return roomData as RoomData; // RoomData型にキャストして返す\n    } else {\n      console.error(\"ルームが存在しません\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"ルームデータの取得に失敗しました:\", error);\n    return null;\n  }\n};\n//#endregion\n\n//#region BattleView\n\n//#region メッセージ\n// メッセージを送信する関数\nexport const sendMessage = async (roomId: string, message: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const messageRef = ref(db, DATABASE_PATHS.messages(roomId));\n  console.log(\"メッセージ:\", message);\n  const messageData: Message = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now(),\n  };\n  https: await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\", messageData);\n};\n\nexport const onMessageAdded = (\n  roomId: string,\n  callback: (data: any) => void\n) => {\n  // メッセージリストの参照\n  const messagesRef = ref(db, DATABASE_PATHS.messages(roomId));\n\n  // メッセージが追加されたときの監視\n  onChildAdded(messagesRef, (snapshot) => {\n    const newMessage = snapshot.val();\n    console.log(\"メッセージが追加されました。\", newMessage);\n    callback(newMessage); // 新しいメッセージをコールバックで返す\n  });\n};\n\n//#endregion\n\n//#region バトル終了時\n// 回答を送信する関数\nexport const sendAnswer = async (roomId: string, answer: SubmitAnswer) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const answerRef = ref(db, DATABASE_PATHS.submittedAnswers(roomId));\n  await push(answerRef, answer);\n  console.log(\"回答を送信しました。\", answer);\n};\n\n// 両プレイヤーの回答が揃ったらサーバーレス関数でスコア計算する\nexport const checkAnswers = (roomId: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  // メッセージリストの参照\n  const answerRef = ref(db, DATABASE_PATHS.submittedAnswers(roomId));\n  // 両プレイヤーの選択が揃ったか確認\n  get(answerRef)\n    .then((answersSnapshot) => {\n      if (Object.keys(answersSnapshot.val()).length == 2) {\n        console.log(\"両プレイヤーの回答が揃いました。\", answersSnapshot.val());\n        calculateBattleResult(roomId); //awaitしない\n      } else {\n        // 要素数が2未満の場合、リスナーを設定して監視\n        onValue(answerRef, (snapshot) => {\n          const updatedData = snapshot.val();\n          const updatedCount = updatedData\n            ? Object.keys(updatedData).length\n            : 0;\n\n          // 2つになったタイミングで `func()` を実行し、リスナーを解除\n          if (updatedCount >= 2) {\n            calculateBattleResult(roomId); //awaitしない\n            off(answerRef); // リスナーを解除\n            console.log(\"off checkAnswers\");\n          }\n        });\n      }\n    })\n    .catch((error) => {\n      console.error(\"回答の確認中にエラーが発生しました:\", error);\n    });\n};\n\n//resultが更新されたらバトル終了\nexport const onResultUpdated = (\n  roomId: string,\n  playerNumber: number,\n  callback: (players: ResultData | null) => void\n) => {\n  const resultRef = ref(db, DATABASE_PATHS.result(roomId));\n  const listener = onValue(\n    resultRef,\n    (snapshot) => {\n      const serverData = snapshot.val() as BattleResult; // RoomData型にキャスト\n      if (serverData) {\n        console.log(\"バトル結果が更新されました。\", serverData);\n        const result: ResultData = {\n          playerId: auth.currentUser?.uid || \"\",\n          myAnswer: serverData.answers[playerNumber],\n          opponentAnswer:\n            playerNumber === 0 ? serverData.answers[1] : serverData.answers[0],\n          corrects: serverData.corrects,\n          win:\n            playerNumber === 0\n              ? serverData.scores[0] > serverData.scores[1]\n                ? \"win\"\n                : serverData.scores[0] < serverData.scores[1]\n                  ? \"lose\"\n                  : \"draw\"\n              : serverData.scores[1] > serverData.scores[0]\n                ? \"win\"\n                : serverData.scores[1] < serverData.scores[0]\n                  ? \"lose\"\n                  : \"draw\",\n          score:\n            playerNumber === 0 ? serverData.scores[0] : serverData.scores[1],\n          time: serverData.time,\n        };\n        callback(result);\n      } else {\n        console.log(\"no result data\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n  return () => {\n    console.log(\"off onResultUpdated\");\n    off(resultRef, \"value\", listener);\n  };\n};\n\n//#endregion\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}