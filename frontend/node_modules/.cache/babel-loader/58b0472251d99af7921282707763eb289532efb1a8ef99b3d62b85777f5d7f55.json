{"ast":null,"code":"import{ref,push,get,onValue,onChildAdded,off}from\"firebase/database\";import{auth}from\"./firebase_f.ts\";// Firebaseの認証インスタンスをインポート\nimport{db}from\"./firebase_f.ts\";// Firebase初期化ファイルからデータベースをインポート\n//#region HomeView\n// プレイヤーデータを監視　未使用\nexport const onRoomPlayersAdded=(roomId,callback,stop)=>{const roomRef=ref(db,`rooms/${roomId}/players`);const listener=onChildAdded(roomRef,snapshot=>{if(stop.current){// `stop` が `true` の場合、リスナーを解除して終了\noff(roomRef,\"child_added\",listener);console.log(\"リスナーが解除されました\");return;}const PlayerData=snapshot.val();// RoomData型にキャスト\nif(PlayerData){callback(PlayerData);// データがある場合はコールバックを呼び出す\n}else{console.error(\"ルームが存在しません。\");callback(null);}},error=>{console.error(\"ルームデータの監視中にエラーが発生しました:\",error);callback(null);});return()=>off(roomRef,\"child_added\",listener);};// export const stopOnRoomPlayers = (roomId: string) => {\n//   const roomRef = ref(db, `rooms/${roomId}/players`);\n//   off(roomRef);\n//   console.log(\"addPlayerの監視を停止しました。\");\n// };\n// ルームのデータを監視\nexport const onRoomUpdate=(roomId,callback,stop)=>{const roomRef=ref(db,`rooms/${roomId}`);const listener=onValue(roomRef,snapshot=>{if(stop.current){off(roomRef,\"value\",listener);console.log(\"リスナーが解除されました111\");return;}const roomData=snapshot.val();// RoomData型にキャスト\nif(roomData){callback(roomData);// データがある場合はコールバックを呼び出す\n}else{console.error(\"ルームが存在しません。\");callback(null);}},error=>{console.error(\"ルームデータの監視中にエラーが発生しました:\",error);callback(null);});return()=>{console.log(\"リスナーが解除されました222\");off(roomRef,\"value\",listener);};};// ルームデータを取得する関数　未使用\nexport const getRoomData=async roomId=>{try{const roomRef=ref(db,`rooms/${roomId}`);const snapshot=await get(roomRef);if(snapshot.exists()){const roomData=snapshot.val();return roomData;// RoomData型にキャストして返す\n}else{console.error(\"ルームが存在しません\");return null;}}catch(error){console.error(\"ルームデータの取得に失敗しました:\",error);return null;}};//#endregion\n//#region BattleView\n//#region メッセージ\n// メッセージを送信する関数\nexport const sendMessage=async(roomId,message)=>{const user=auth.currentUser;if(!user){throw new Error(\"ログインしていないユーザーです。\");}const messageRef=ref(db,`rooms/${roomId}/battleLog/messages`);console.log(\"メッセージ:\",message);const messageData={senderId:user.uid,message,timestamp:Date.now()};https:await push(messageRef,messageData);console.log(\"メッセージを送信しました。\");};export const onMessageAdded=(roomId,callback)=>{// メッセージリストの参照\nconst messagesRef=ref(db,`rooms/${roomId}/battleLog/messages`);// メッセージが追加されたときの監視\nonChildAdded(messagesRef,snapshot=>{console.log(\"メッセージが追加されました。\");const newMessage=snapshot.val();callback(newMessage);// 新しいメッセージをコールバックで返す\n});};//#endregion\n//#region バトル終了時\n// 回答を送信する関数\nexport const sendAnswer=async(roomId,answer)=>{const user=auth.currentUser;if(!user){throw new Error(\"ログインしていないユーザーです。\");}const answerRef=ref(db,`rooms/${roomId}/battleLog/submittedAnswers/${user.uid}`);await push(answerRef,answer);console.log(\"回答を送信しました。\");};// 両プレイヤーの回答が揃ったらサーバーレス関数wを呼び出す\nexport const checkAnswers=roomId=>{const user=auth.currentUser;if(!user){throw new Error(\"ログインしていないユーザーです。\");}// メッセージリストの参照\nconst answerRef=ref(db,`rooms/${roomId}/battleLog/submittedAnswers`);// 両プレイヤーの選択が揃ったか確認\nget(answerRef).then(answersSnapshot=>{if(Object.keys(answersSnapshot.val()).length==2){//TODO: firebase functionを呼び出す\n// func();\n}else{// 要素数が2未満の場合、リスナーを設定して監視\nonValue(answerRef,snapshot=>{const updatedData=snapshot.val();const updatedCount=updatedData?Object.keys(updatedData).length:0;// 2つになったタイミングで `finc()` を実行し、リスナーを解除\nif(updatedCount>=2){// func();\noff(answerRef);// リスナーを解除\n}});}}).catch(error=>{console.error(\"回答の確認中にエラーが発生しました:\",error);});};//resultが返ってきたらバトル終了\nexport const onResultUpdated=(roomId,callback,stop)=>{const resultRef=ref(db,`rooms/${roomId}/battleLog/result`);const listener=onChildAdded(resultRef,snapshot=>{if(stop.current){// `stop` が `true` の場合、リスナーを解除して終了\noff(resultRef,\"child_added\",listener);console.log(\"リスナーが解除されました\");return;}const serverData=snapshot.val();// RoomData型にキャスト\nif(serverData){// データがある場合\n//TODO: データを整形して返す\n}else{console.error(\"ルームが存在しません。\");callback(null);}},error=>{console.error(\"ルームデータの監視中にエラーが発生しました:\",error);callback(null);});};// バトル終了を監視するリスナー\n// export const onBattleEnd = (roomId: string, callback: () => void) => {\n//   const statusRef = ref(db, `rooms/${roomId}/status`);\n//   // バトルの終了を監視\n//   onValue(statusRef, (snapshot) => {\n//     const status = snapshot.val();\n//     if (status === \"ended\") {\n//       callback(); // バトルが終了したらコールバックを実行\n//     }\n//   });\n// };\n//#endregion","map":{"version":3,"names":["ref","push","get","onValue","onChildAdded","off","auth","db","onRoomPlayersAdded","roomId","callback","stop","roomRef","listener","snapshot","current","console","log","PlayerData","val","error","onRoomUpdate","roomData","getRoomData","exists","sendMessage","message","user","currentUser","Error","messageRef","messageData","senderId","uid","timestamp","Date","now","https","onMessageAdded","messagesRef","newMessage","sendAnswer","answer","answerRef","checkAnswers","then","answersSnapshot","Object","keys","length","updatedData","updatedCount","catch","onResultUpdated","resultRef","serverData"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase-realtime-database.ts"],"sourcesContent":["import {\n  ref,\n  push,\n  get,\n  onValue,\n  remove,\n  child,\n  onChildAdded,\n  off,\n} from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\nimport {\n  BattleLog,\n  BattleResult,\n  Message,\n  PlayerData,\n  ResultData,\n  RoomData,\n  SubmitAnswer,\n} from \"shared/dist/types\";\n//#region HomeView\n// プレイヤーデータを監視　未使用\nexport const onRoomPlayersAdded = (\n  roomId: string,\n  callback: (players: PlayerData[] | null) => void,\n  stop: { current: boolean }\n) => {\n  const roomRef = ref(db, `rooms/${roomId}/players`);\n  const listener = onChildAdded(\n    roomRef,\n    (snapshot) => {\n      if (stop.current) {\n        // `stop` が `true` の場合、リスナーを解除して終了\n        off(roomRef, \"child_added\", listener);\n        console.log(\"リスナーが解除されました\");\n        return;\n      }\n      const PlayerData = snapshot.val() as PlayerData[] | null; // RoomData型にキャスト\n      if (PlayerData) {\n        callback(PlayerData); // データがある場合はコールバックを呼び出す\n      } else {\n        console.error(\"ルームが存在しません。\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n\n  return () => off(roomRef, \"child_added\", listener);\n};\n\n// export const stopOnRoomPlayers = (roomId: string) => {\n//   const roomRef = ref(db, `rooms/${roomId}/players`);\n//   off(roomRef);\n//   console.log(\"addPlayerの監視を停止しました。\");\n// };\n\n// ルームのデータを監視\nexport const onRoomUpdate = (\n  roomId: string,\n  callback: (roomData: RoomData | null) => void,\n  stop: { current: boolean }\n) => {\n  const roomRef = ref(db, `rooms/${roomId}`);\n  const listener = onValue(\n    roomRef,\n    (snapshot) => {\n      if (stop.current) {\n        off(roomRef, \"value\", listener);\n        console.log(\"リスナーが解除されました111\");\n        return;\n      }\n      const roomData = snapshot.val() as RoomData | null; // RoomData型にキャスト\n      if (roomData) {\n        callback(roomData); // データがある場合はコールバックを呼び出す\n      } else {\n        console.error(\"ルームが存在しません。\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n  return () => {\n    console.log(\"リスナーが解除されました222\");\n    off(roomRef, \"value\", listener);\n  };\n};\n\n// ルームデータを取得する関数　未使用\nexport const getRoomData = async (roomId: string): Promise<RoomData | null> => {\n  try {\n    const roomRef = ref(db, `rooms/${roomId}`);\n    const snapshot = await get(roomRef);\n\n    if (snapshot.exists()) {\n      const roomData = snapshot.val();\n      return roomData as RoomData; // RoomData型にキャストして返す\n    } else {\n      console.error(\"ルームが存在しません\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"ルームデータの取得に失敗しました:\", error);\n    return null;\n  }\n};\n//#endregion\n\n//#region BattleView\n\n//#region メッセージ\n// メッセージを送信する関数\nexport const sendMessage = async (roomId: string, message: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const messageRef = ref(db, `rooms/${roomId}/battleLog/messages`);\n  console.log(\"メッセージ:\", message);\n  const messageData: Message = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now(),\n  };\n  https: await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\");\n};\n\nexport const onMessageAdded = (\n  roomId: string,\n  callback: (data: any) => void\n) => {\n  // メッセージリストの参照\n  const messagesRef = ref(db, `rooms/${roomId}/battleLog/messages`);\n\n  // メッセージが追加されたときの監視\n  onChildAdded(messagesRef, (snapshot) => {\n    console.log(\"メッセージが追加されました。\");\n    const newMessage = snapshot.val();\n    callback(newMessage); // 新しいメッセージをコールバックで返す\n  });\n};\n\n//#endregion\n\n//#region バトル終了時\n// 回答を送信する関数\nexport const sendAnswer = async (roomId: string, answer: SubmitAnswer) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const answerRef = ref(\n    db,\n    `rooms/${roomId}/battleLog/submittedAnswers/${user.uid}`\n  );\n  await push(answerRef, answer);\n  console.log(\"回答を送信しました。\");\n};\n\n// 両プレイヤーの回答が揃ったらサーバーレス関数wを呼び出す\nexport const checkAnswers = (roomId: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  // メッセージリストの参照\n  const answerRef = ref(db, `rooms/${roomId}/battleLog/submittedAnswers`);\n  // 両プレイヤーの選択が揃ったか確認\n  get(answerRef)\n    .then((answersSnapshot) => {\n      if (Object.keys(answersSnapshot.val()).length == 2) {\n        //TODO: firebase functionを呼び出す\n        // func();\n      } else {\n        // 要素数が2未満の場合、リスナーを設定して監視\n        onValue(answerRef, (snapshot) => {\n          const updatedData = snapshot.val();\n          const updatedCount = updatedData\n            ? Object.keys(updatedData).length\n            : 0;\n\n          // 2つになったタイミングで `finc()` を実行し、リスナーを解除\n          if (updatedCount >= 2) {\n            // func();\n            off(answerRef); // リスナーを解除\n          }\n        });\n      }\n    })\n    .catch((error) => {\n      console.error(\"回答の確認中にエラーが発生しました:\", error);\n    });\n};\n\n//resultが返ってきたらバトル終了\nexport const onResultUpdated = (\n  roomId: string,\n  callback: (players: ResultData[] | null) => void,\n  stop: { current: boolean }\n) => {\n  const resultRef = ref(db, `rooms/${roomId}/battleLog/result`);\n  const listener = onChildAdded(\n    resultRef,\n    (snapshot) => {\n      if (stop.current) {\n        // `stop` が `true` の場合、リスナーを解除して終了\n        off(resultRef, \"child_added\", listener);\n        console.log(\"リスナーが解除されました\");\n        return;\n      }\n      const serverData = snapshot.val() as BattleResult; // RoomData型にキャスト\n      if (serverData) {\n        // データがある場合\n        //TODO: データを整形して返す\n      } else {\n        console.error(\"ルームが存在しません。\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n};\n\n// バトル終了を監視するリスナー\n// export const onBattleEnd = (roomId: string, callback: () => void) => {\n//   const statusRef = ref(db, `rooms/${roomId}/status`);\n\n//   // バトルの終了を監視\n//   onValue(statusRef, (snapshot) => {\n//     const status = snapshot.val();\n//     if (status === \"ended\") {\n//       callback(); // バトルが終了したらコールバックを実行\n//     }\n//   });\n// };\n//#endregion\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}