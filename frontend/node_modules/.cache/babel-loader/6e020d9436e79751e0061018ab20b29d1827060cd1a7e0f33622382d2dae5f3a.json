{"ast":null,"code":"var _jsxFileName = \"/Users/ryotarooda/Desktop/\\u5352\\u8AD6/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/views/BattleView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useLocation, useParams } from \"react-router-dom\";\nimport { sendMessage, onTurnUpdated, onBattleEnd } from \"../services/FRD.ts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BattleView = () => {\n  _s();\n  var _location$state, _location$state2, _location$state3, _location$state4, _location$state5;\n  // State hooks\n  const [chatLog, setChatLog] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  const [isMyTurn, setIsMyTurn] = useState(true); // Initial turn state (placeholder)\n  const [turnCount, setTurnCount] = useState(0);\n\n  // Location and Params\n  const location = useLocation();\n  const {\n    roomId\n  } = useParams();\n\n  // Player Information\n  const myId = \"uniquePlayerId\"; // TODO: Replace with actual ID generation/auth logic\n  const myName = (_location$state = location.state) !== null && _location$state !== void 0 && _location$state.myData.playerName ? `${location.state.myData.playerName} (あなた)` : \"error\";\n  const opponentId = ((_location$state2 = location.state) === null || _location$state2 === void 0 ? void 0 : _location$state2.matchData.opponentId) || \"error\";\n  const opponentName = ((_location$state3 = location.state) === null || _location$state3 === void 0 ? void 0 : _location$state3.matchData.opponentName) || \"error\";\n\n  // Battle Configuration\n  const maxTurn = ((_location$state4 = location.state) === null || _location$state4 === void 0 ? void 0 : _location$state4.matchData.battleConfig.maxTurn) || 10;\n  const oneTurnTime = ((_location$state5 = location.state) === null || _location$state5 === void 0 ? void 0 : _location$state5.matchData.battleConfig.oneTurnTime) || 60; // in seconds\n  const [remainingTime, setRemainingTime] = useState(oneTurnTime);\n\n  // Player names mapping\n  const playerNames = {\n    [myId]: myName,\n    [opponentId]: opponentName\n  };\n\n  // ゲームの進行状況を監視する\n  useEffect(() => {\n    if (roomId) {\n      // ターンの更新を監視\n      onTurnUpdated(roomId, data => {\n        setIsMyTurn(data.battleLog.activePlayerId === myId); // 自分のターンかどうかを判定\n        setTurnCount(data.battleLog.currentTurn);\n\n        // 新しいメッセージが追加されていれば、それをチャットログに追加\n        const newMessage = data.battleLog.messages[data.battleLog.currentTurn];\n        if (newMessage) {\n          setChatLog(prevChatLog => [...prevChatLog, {\n            senderId: newMessage.senderId,\n            message: newMessage.message\n          }]);\n        }\n      });\n    }\n  }, [roomId, myId]);\n\n  // useEffect(() => {\n  //   if (roomId) {\n  //     // ターン更新をFirebaseから受け取る\n  //     onTurnUpdated(roomId, (data: { battleLog: BattleLog }) => {\n  //       setIsMyTurn(data.battleLog.activePlayerId === myId);\n  //       setTurnCount(data.battleLog.currentTurn);\n\n  //       const newMessage = data.battleLog.messages[data.battleLog.currentTurn];\n  //       setChatLog((prevChatLog) => [\n  //         ...prevChatLog,\n  //         { senderId: newMessage.senderId, message: newMessage.message },\n  //       ]);\n  //       if (message === \"送信中...\") setMessage(\"\");\n  //     });\n  //   }\n  // }, [roomId, myId, message]);\n\n  // バトル終了の監視\n  useEffect(() => {\n    if (roomId) {\n      onBattleEnd(roomId, () => {\n        alert(\"Battle Ended!\");\n      });\n    }\n  }, [roomId]);\n  const handleSendMessage = async () => {\n    if (message.trim() && isMyTurn && roomId) {\n      await sendMessage(roomId, message, myId);\n      setMessage(\"送信中...\");\n      setIsMyTurn(false);\n    }\n  };\n  const handleFinishMatching = () => {\n    console.log(\"Finishing battle...\");\n    // バトル終了のロジック\n  };\n\n  //html\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u5BFE\\u6226\\u753B\\u9762\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u30EB\\u30FC\\u30E0ID: \", roomId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u30C1\\u30E3\\u30C3\\u30C8\\u30ED\\u30B0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: chatLog.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: [playerNames[msg.senderId] || \"Unknown\", \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), \" \", msg.message]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u6B8B\\u308A\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u6570: \", maxTurn - turnCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u3053\\u306E\\u30BF\\u30FC\\u30F3\\u306E\\u6B8B\\u308A\\u6642\\u9593: \", remainingTime, \"\\u79D2\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u30BF\\u30FC\\u30F3\\u30D7\\u30EC\\u30FC\\u30E4\\u30FC: \", isMyTurn ? \"あなた\" : \"相手\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"\\u76F8\\u624B\\u306E\\u30D7\\u30EC\\u30A4\\u30E4\\u30FC\\u30CD\\u30FC\\u30E0: \", opponentName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter message\",\n          value: message,\n          onChange: e => setMessage(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        disabled: !isMyTurn,\n        children: isMyTurn ? \"送信\" : \"Wait for your turn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/result\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFinishMatching,\n        children: \"\\u30D0\\u30C8\\u30EB\\u7D42\\u4E86\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(BattleView, \"1VuWEoB3fVkl9D6Ax2IiMy7L+3c=\", false, function () {\n  return [useLocation, useParams];\n});\n_c = BattleView;\nexport default BattleView;\nvar _c;\n$RefreshReg$(_c, \"BattleView\");","map":{"version":3,"names":["React","useState","useEffect","Link","useLocation","useParams","sendMessage","onTurnUpdated","onBattleEnd","jsxDEV","_jsxDEV","BattleView","_s","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","chatLog","setChatLog","message","setMessage","isMyTurn","setIsMyTurn","turnCount","setTurnCount","location","roomId","myId","myName","state","myData","playerName","opponentId","matchData","opponentName","maxTurn","battleConfig","oneTurnTime","remainingTime","setRemainingTime","playerNames","data","battleLog","activePlayerId","currentTurn","newMessage","messages","prevChatLog","senderId","alert","handleSendMessage","trim","handleFinishMatching","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","placeholder","value","onChange","e","target","onClick","disabled","to","_c","$RefreshReg$"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/views/BattleView.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useLocation, useParams } from \"react-router-dom\";\nimport { sendMessage, onTurnUpdated, onBattleEnd } from \"../services/FRD.ts\";\nimport { BattleLog } from \"../../../shared/types.ts\";\n\nconst BattleView: React.FC = () => {\n// State hooks\nconst [chatLog, setChatLog] = useState<{ senderId: string; message: string }[]>([]);\nconst [message, setMessage] = useState<string>(\"\");\nconst [isMyTurn, setIsMyTurn] = useState<boolean>(true); // Initial turn state (placeholder)\nconst [turnCount, setTurnCount] = useState<number>(0);\n\n// Location and Params\nconst location = useLocation();\nconst { roomId } = useParams<{ roomId: string }>();\n\n// Player Information\nconst myId = \"uniquePlayerId\"; // TODO: Replace with actual ID generation/auth logic\nconst myName = location.state?.myData.playerName \n  ? `${location.state.myData.playerName} (あなた)` \n  : \"error\";\n\nconst opponentId = location.state?.matchData.opponentId || \"error\";\nconst opponentName = location.state?.matchData.opponentName || \"error\";\n\n// Battle Configuration\nconst maxTurn = location.state?.matchData.battleConfig.maxTurn || 10;\nconst oneTurnTime = location.state?.matchData.battleConfig.oneTurnTime || 60; // in seconds\nconst [remainingTime, setRemainingTime] = useState<number>(oneTurnTime);\n\n// Player names mapping\nconst playerNames: Record<string, string> = {\n  [myId]: myName,\n  [opponentId]: opponentName,\n};\n\n// ゲームの進行状況を監視する\nuseEffect(() => {\n  if (roomId) {\n    // ターンの更新を監視\n    onTurnUpdated(roomId, (data: { battleLog: BattleLog }) => {\n      setIsMyTurn(data.battleLog.activePlayerId === myId);  // 自分のターンかどうかを判定\n      setTurnCount(data.battleLog.currentTurn);\n\n      // 新しいメッセージが追加されていれば、それをチャットログに追加\n      const newMessage = data.battleLog.messages[data.battleLog.currentTurn];\n      if (newMessage) {\n        setChatLog((prevChatLog) => [\n          ...prevChatLog,\n          { senderId: newMessage.senderId, message: newMessage.message }\n        ]);\n      }\n    });\n  }\n}, [roomId, myId]);\n\n  // useEffect(() => {\n  //   if (roomId) {\n  //     // ターン更新をFirebaseから受け取る\n  //     onTurnUpdated(roomId, (data: { battleLog: BattleLog }) => {\n  //       setIsMyTurn(data.battleLog.activePlayerId === myId);\n  //       setTurnCount(data.battleLog.currentTurn);\n        \n  //       const newMessage = data.battleLog.messages[data.battleLog.currentTurn];\n  //       setChatLog((prevChatLog) => [\n  //         ...prevChatLog,\n  //         { senderId: newMessage.senderId, message: newMessage.message },\n  //       ]);\n  //       if (message === \"送信中...\") setMessage(\"\");\n  //     });\n  //   }\n  // }, [roomId, myId, message]);\n\n   // バトル終了の監視\n   useEffect(() => {\n    if (roomId) {\n      onBattleEnd(roomId, () => {\n        alert(\"Battle Ended!\");\n      });\n    }\n  }, [roomId]);\n\n  const handleSendMessage = async () => {\n    if (message.trim() && isMyTurn && roomId) {\n      await sendMessage(roomId, message, myId);\n      setMessage(\"送信中...\");\n      setIsMyTurn(false);\n    }\n  };\n\n  const handleFinishMatching = () => {\n    console.log(\"Finishing battle...\");\n    // バトル終了のロジック\n  };\n\n  //html\n  return (\n    <div>\n      <h1>対戦画面</h1>\n      <p>ルームID: {roomId}</p>\n      <div>\n        <h2>チャットログ</h2>\n        <ul>\n          {chatLog.map((msg, index) => (\n            <li key={index}>\n              <strong>{playerNames[msg.senderId] || \"Unknown\"}:</strong> {msg.message}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <p>残りメッセージ数: {maxTurn - turnCount}</p>\n      <p>このターンの残り時間: {remainingTime}秒</p>\n      <p>ターンプレーヤー: {isMyTurn ? \"あなた\" : \"相手\"}</p>\n      <p>相手のプレイヤーネーム: {opponentName}</p>\n      <div>\n        <label>\n          メッセージ:\n          <input\n            type=\"text\"\n            placeholder=\"Enter message\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n        </label>\n        <button onClick={handleSendMessage} disabled={!isMyTurn}>\n          {isMyTurn ? \"送信\" : \"Wait for your turn\"}\n        </button>\n      </div>\n      <Link to=\"/result\">\n        <button onClick={handleFinishMatching}>バトル終了</button>\n      </Link>\n    </div>\n  );\n};\n\nexport default BattleView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}