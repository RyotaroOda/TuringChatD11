{"ast":null,"code":"// FRD = Firebase Realtime Database\nimport{ref,push,update,onValue}from\"firebase/database\";import{db}from\"./firebase.ts\";// Firebase初期化ファイルからデータベースをインポート\nimport{auth}from\"./firebase.ts\";// Firebaseの認証情報をインポート\n// プレイヤーネームの保存\nexport const savePlayerName=async playerName=>{const user=auth.currentUser;// 現在のユーザーを取得\nif(user){const userId=user.uid;await update(ref(db,'users/'+userId),{name:playerName});return userId;}else{throw new Error(\"ユーザーがログインしていません\");}};// マッチングリクエスト\nexport const requestMatch=async()=>{const user=auth.currentUser;// 現在のユーザーを取得\nif(user){const userId=user.uid;const matchRef=push(ref(db,'matches'));await update(matchRef,{player1:userId,status:'waiting'});return matchRef.key;}else{throw new Error(\"ユーザーがログインしていません\");}};// マッチング成功時のリスナー\nexport const onMatchFound=callback=>{const matchRef=ref(db,'matches');onValue(matchRef,snapshot=>{const matches=snapshot.val();if(matches){Object.keys(matches).forEach(key=>{const match=matches[key];if(match.status==='waiting'){// マッチング成立の処理を行う\ncallback({roomId:key,opponentId:match.player1,battleConfig:match.battleConfig// 必要なデータを追加\n});}});}});};// メッセージの送信\nexport const sendMessage=async(roomId,message)=>{const user=auth.currentUser;// 現在のユーザーを取得\nif(user){const messageRef=ref(db,'rooms/'+roomId+'/messages');await push(messageRef,{senderId:user.uid,message});}else{throw new Error(\"ユーザーがログインしていません\");}};// ターン更新リスナー\nexport const onTurnUpdated=(roomId,callback)=>{const logRef=ref(db,'rooms/'+roomId+'/battleLog');onValue(logRef,snapshot=>{const battleLog=snapshot.val();if(battleLog){callback(battleLog);}});};// バトル終了リスナー\nexport const onBattleEnd=(roomId,callback)=>{const roomRef=ref(db,'rooms/'+roomId+'/status');onValue(roomRef,snapshot=>{const status=snapshot.val();if(status==='ended'){callback();}});};","map":{"version":3,"names":["ref","push","update","onValue","db","auth","savePlayerName","playerName","user","currentUser","userId","uid","name","Error","requestMatch","matchRef","player1","status","key","onMatchFound","callback","snapshot","matches","val","Object","keys","forEach","match","roomId","opponentId","battleConfig","sendMessage","message","messageRef","senderId","onTurnUpdated","logRef","battleLog","onBattleEnd","roomRef"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/FRD.ts"],"sourcesContent":["// FRD = Firebase Realtime Database\nimport { getDatabase, ref, push, update, onValue } from \"firebase/database\";\nimport { db } from \"./firebase.ts\"; // Firebase初期化ファイルからデータベースをインポート\nimport { auth } from \"./firebase.ts\"; // Firebaseの認証情報をインポート\n\n// プレイヤーネームの保存\nexport const savePlayerName = async (playerName: string) => {\n  const user = auth.currentUser; // 現在のユーザーを取得\n  if (user) {\n    const userId = user.uid;\n    await update(ref(db, 'users/' + userId), { name: playerName });\n    return userId;\n  } else {\n    throw new Error(\"ユーザーがログインしていません\");\n  }\n};\n\n// マッチングリクエスト\nexport const requestMatch = async () => {\n  const user = auth.currentUser; // 現在のユーザーを取得\n  if (user) {\n    const userId = user.uid;\n    const matchRef = push(ref(db, 'matches'));\n    await update(matchRef, { player1: userId, status: 'waiting' });\n    return matchRef.key;\n  } else {\n    throw new Error(\"ユーザーがログインしていません\");\n  }\n};\n\n// マッチング成功時のリスナー\nexport const onMatchFound = (callback: (data: any) => void) => {\n  const matchRef = ref(db, 'matches');\n  onValue(matchRef, (snapshot) => {\n    const matches = snapshot.val();\n    if (matches) {\n      Object.keys(matches).forEach((key) => {\n        const match = matches[key];\n        if (match.status === 'waiting') {\n          // マッチング成立の処理を行う\n          callback({\n            roomId: key,\n            opponentId: match.player1,\n            battleConfig: match.battleConfig, // 必要なデータを追加\n          });\n        }\n      });\n    }\n  });\n};\n\n// メッセージの送信\nexport const sendMessage = async (roomId: string, message: string) => {\n  const user = auth.currentUser; // 現在のユーザーを取得\n  if (user) {\n    const messageRef = ref(db, 'rooms/' + roomId + '/messages');\n    await push(messageRef, { senderId: user.uid, message });\n  } else {\n    throw new Error(\"ユーザーがログインしていません\");\n  }\n};\n\n// ターン更新リスナー\nexport const onTurnUpdated = (roomId: string, callback: (data: any) => void) => {\n  const logRef = ref(db, 'rooms/' + roomId + '/battleLog');\n  onValue(logRef, (snapshot) => {\n    const battleLog = snapshot.val();\n    if (battleLog) {\n      callback(battleLog);\n    }\n  });\n};\n\n// バトル終了リスナー\nexport const onBattleEnd = (roomId: string, callback: () => void) => {\n  const roomRef = ref(db, 'rooms/' + roomId + '/status');\n  onValue(roomRef, (snapshot) => {\n    const status = snapshot.val();\n    if (status === 'ended') {\n      callback();\n    }\n  });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}