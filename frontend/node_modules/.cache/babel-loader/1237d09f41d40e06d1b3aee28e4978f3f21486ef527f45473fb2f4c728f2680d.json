{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{Link,useLocation,useParams}from\"react-router-dom\";import{sendMessage,onTurnUpdated,onBattleEnd}from\"../services/firebase-realtime-database.ts\";import{useAuth}from\"../services/useAuth.tsx\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BattleView=()=>{//#region init\nconst{roomId}=useParams();const{user}=useAuth();const myId=(user===null||user===void 0?void 0:user.uid)||\"error\";// Location and Params\nconst location=useLocation();const state=location.state.roomData;const myData=myId===state.player1.id?state.player1:state.player2;const opponentData=myId===state.player1.id?state.player2:state.player1;// Player Information\nconst myName=`${myData.name} (あなた)`||\"error\";// Battle Configuration\nconst battleConfig=state.battleConfig;const[remainingTime,setRemainingTime]=useState(battleConfig.oneTurnTime);//#endregion\nconsole.log(\"data\",state);// Player names mapping\nconst playerNames={[myId]:myName,[opponentData.id]:opponentData.name};const[chatLog,setChatLog]=useState([]);const[message,setMessage]=useState(\"\");const[isMyTurn,setIsMyTurn]=useState(true);// Initial turn state (placeholder)\nconst[turnCount,setTurnCount]=useState(0);// ゲームの進行状況を監視する\nuseEffect(()=>{if(roomId){// ターン更新をFirebaseから受け取る\nonTurnUpdated(roomId,data=>{setIsMyTurn(data.battleLog.activePlayerId===myId);setTurnCount(data.battleLog.currentTurn);const newMessage=data.battleLog.messages[data.battleLog.currentTurn];setChatLog(prevChatLog=>[...prevChatLog,{senderId:newMessage.senderId,message:newMessage.message}]);if(message===\"送信中...\")setMessage(\"\");});}},[roomId,myId,message]);// バトル終了の監視\nuseEffect(()=>{if(roomId){onBattleEnd(roomId,()=>{alert(\"Battle Ended!\");});}},[roomId]);const handleSendMessage=async()=>{if(message.trim()&&isMyTurn&&roomId){await sendMessage(roomId,message);setMessage(\"送信中...\");setIsMyTurn(false);}};const handleFinishMatching=()=>{console.log(\"Finishing battle...\");// バトル終了のロジック\n};//html\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u5BFE\\u6226\\u753B\\u9762\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u30EB\\u30FC\\u30E0ID: \",roomId]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\u30C1\\u30E3\\u30C3\\u30C8\\u30ED\\u30B0\"}),/*#__PURE__*/_jsx(\"ul\",{children:chatLog.map((msg,index)=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[playerNames[msg.senderId]||\"Unknown\",\":\"]}),\" \",msg.message]},index))})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u6B8B\\u308A\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u6570: \",battleConfig.maxTurn-turnCount]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u3053\\u306E\\u30BF\\u30FC\\u30F3\\u306E\\u6B8B\\u308A\\u6642\\u9593: \",remainingTime,\"\\u79D2\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u30BF\\u30FC\\u30F3\\u30D7\\u30EC\\u30FC\\u30E4\\u30FC: \",isMyTurn?\"あなた\":\"相手\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u76F8\\u624B: \",opponentData.name]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Enter message\",value:message,onChange:e=>setMessage(e.target.value)})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSendMessage,disabled:!isMyTurn,children:isMyTurn?\"送信\":\"Wait for your turn\"})]}),/*#__PURE__*/_jsx(Link,{to:\"/result\",children:/*#__PURE__*/_jsx(\"button\",{onClick:handleFinishMatching,children:\"\\u30D0\\u30C8\\u30EB\\u7D42\\u4E86\"})})]});};export default BattleView;","map":{"version":3,"names":["React","useState","useEffect","Link","useLocation","useParams","sendMessage","onTurnUpdated","onBattleEnd","useAuth","jsx","_jsx","jsxs","_jsxs","BattleView","roomId","user","myId","uid","location","state","roomData","myData","player1","id","player2","opponentData","myName","name","battleConfig","remainingTime","setRemainingTime","oneTurnTime","console","log","playerNames","chatLog","setChatLog","message","setMessage","isMyTurn","setIsMyTurn","turnCount","setTurnCount","data","battleLog","activePlayerId","currentTurn","newMessage","messages","prevChatLog","senderId","alert","handleSendMessage","trim","handleFinishMatching","children","map","msg","index","maxTurn","type","placeholder","value","onChange","e","target","onClick","disabled","to"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/views/BattleView.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useLocation, useParams } from \"react-router-dom\";\nimport {\n  sendMessage,\n  onTurnUpdated,\n  onBattleEnd,\n} from \"../services/firebase-realtime-database.ts\";\nimport { BattleLog, PlayerData, RoomData } from \"shared/dist/types\";\nimport { useAuth } from \"../services/useAuth.tsx\";\n\nconst BattleView: React.FC = () => {\n  //#region init\n  const { roomId } = useParams<{ roomId: string }>();\n\n  const { user } = useAuth();\n  const myId = user?.uid || \"error\";\n\n  // Location and Params\n  const location = useLocation();\n  const state: RoomData = location.state.roomData;\n\n  const myData: PlayerData =\n    myId === state.player1.id ? state.player1 : state.player2!;\n  const opponentData: PlayerData =\n    myId === state.player1.id ? state.player2! : state.player1;\n\n  // Player Information\n  const myName = `${myData.name} (あなた)` || \"error\";\n\n  // Battle Configuration\n  const battleConfig = state.battleConfig;\n  const [remainingTime, setRemainingTime] = useState<number>(\n    battleConfig.oneTurnTime\n  );\n  //#endregion\n  console.log(\"data\", state);\n\n  // Player names mapping\n  const playerNames: Record<string, string> = {\n    [myId]: myName,\n    [opponentData.id]: opponentData.name,\n  };\n  const [chatLog, setChatLog] = useState<\n    { senderId: string; message: string }[]\n  >([]);\n  const [message, setMessage] = useState<string>(\"\");\n  const [isMyTurn, setIsMyTurn] = useState<boolean>(true); // Initial turn state (placeholder)\n  const [turnCount, setTurnCount] = useState<number>(0);\n\n  // ゲームの進行状況を監視する\n  useEffect(() => {\n    if (roomId) {\n      // ターン更新をFirebaseから受け取る\n      onTurnUpdated(roomId, (data: { battleLog: BattleLog }) => {\n        setIsMyTurn(data.battleLog.activePlayerId === myId);\n        setTurnCount(data.battleLog.currentTurn);\n\n        const newMessage = data.battleLog.messages[data.battleLog.currentTurn];\n        setChatLog((prevChatLog) => [\n          ...prevChatLog,\n          { senderId: newMessage.senderId, message: newMessage.message },\n        ]);\n        if (message === \"送信中...\") setMessage(\"\");\n      });\n    }\n  }, [roomId, myId, message]);\n\n  // バトル終了の監視\n  useEffect(() => {\n    if (roomId) {\n      onBattleEnd(roomId, () => {\n        alert(\"Battle Ended!\");\n      });\n    }\n  }, [roomId]);\n\n  const handleSendMessage = async () => {\n    if (message.trim() && isMyTurn && roomId) {\n      await sendMessage(roomId, message);\n      setMessage(\"送信中...\");\n      setIsMyTurn(false);\n    }\n  };\n\n  const handleFinishMatching = () => {\n    console.log(\"Finishing battle...\");\n    // バトル終了のロジック\n  };\n\n  //html\n  return (\n    <div>\n      <h1>対戦画面</h1>\n      <p>ルームID: {roomId}</p>\n      <div>\n        <h2>チャットログ</h2>\n        <ul>\n          {chatLog.map((msg, index) => (\n            <li key={index}>\n              <strong>{playerNames[msg.senderId] || \"Unknown\"}:</strong>{\" \"}\n              {msg.message}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <p>残りメッセージ数: {battleConfig.maxTurn - turnCount}</p>\n      <p>このターンの残り時間: {remainingTime}秒</p>\n      <p>ターンプレーヤー: {isMyTurn ? \"あなた\" : \"相手\"}</p>\n      <p>相手: {opponentData.name}</p>\n      <div>\n        <label>\n          メッセージ:\n          <input\n            type=\"text\"\n            placeholder=\"Enter message\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n        </label>\n        <button onClick={handleSendMessage} disabled={!isMyTurn}>\n          {isMyTurn ? \"送信\" : \"Wait for your turn\"}\n        </button>\n      </div>\n      <Link to=\"/result\">\n        <button onClick={handleFinishMatching}>バトル終了</button>\n      </Link>\n    </div>\n  );\n};\n\nexport default BattleView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}