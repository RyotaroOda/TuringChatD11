{"ast":null,"code":"import{ref,push,get,onValue,onChildAdded,off}from\"firebase/database\";import{auth}from\"./firebase_f.ts\";// Firebaseの認証インスタンスをインポート\nimport{db}from\"./firebase_f.ts\";// Firebase初期化ファイルからデータベースをインポート\n//#region HomeView\n// ルームのデータを監視\nexport const onRoomPlayersAdded=(roomId,callback)=>{const roomRef=ref(db,`rooms/${roomId}/players`);onChildAdded(roomRef,snapshot=>{const PlayerData=snapshot.val();// RoomData型にキャスト\nif(PlayerData){callback(PlayerData);// データがある場合はコールバックを呼び出す\n}else{console.error(\"ルームが存在しません。\");callback(null);}},error=>{console.error(\"ルームデータの監視中にエラーが発生しました:\",error);callback(null);});};export const stopOnRoomPlayers=roomId=>{const roomRef=ref(db,`rooms/${roomId}/players`);off(roomRef);console.log(\"addPlayerの監視を停止しました。\");};// ルームのデータを監視\nexport const onRoomUpdate=(roomId,callback)=>{const roomRef=ref(db,`rooms/${roomId}`);onValue(roomRef,snapshot=>{const roomData=snapshot.val();// RoomData型にキャスト\nif(roomData){callback(roomData);// データがある場合はコールバックを呼び出す\n}else{console.error(\"ルームが存在しません。\");callback(null);}},error=>{console.error(\"ルームデータの監視中にエラーが発生しました:\",error);callback(null);});};// ルームデータを取得する関数\nexport const getRoomData=async roomId=>{try{const roomRef=ref(db,`rooms/${roomId}`);const snapshot=await get(roomRef);if(snapshot.exists()){const roomData=snapshot.val();return roomData;// RoomData型にキャストして返す\n}else{console.error(\"ルームが存在しません\");return null;}}catch(error){console.error(\"ルームデータの取得に失敗しました:\",error);return null;}};//#endregion\n//#region BattleView\n// メッセージを送信する関数\nexport const sendMessage=async(roomId,message)=>{const user=auth.currentUser;if(!user){throw new Error(\"ログインしていないユーザーです。\");}const messageRef=ref(db,`rooms/${roomId}/battleLog/messages`);console.log(\"メッセージ:\",message);const messageData={senderId:user.uid,message,timestamp:Date.now()};https:await push(messageRef,messageData);console.log(\"メッセージを送信しました。\");};export const onMessageAdded=(roomId,callback)=>{// メッセージリストの参照\nconst messagesRef=ref(db,`rooms/${roomId}/battleLog/messages`);// メッセージが追加されたときの監視\nonChildAdded(messagesRef,snapshot=>{console.log(\"メッセージが追加されました。\");const newMessage=snapshot.val();callback(newMessage);// 新しいメッセージをコールバックで返す\n});};// // バトルログの更新を監視するリスナー\n// export const onTurnUpdated = (\n//   roomId: string,\n//   callback: (battleLog: BattleLog) => void\n// ) => {\n//   const battleLogRef = ref(db, `rooms/${roomId}/battleLog/messages`);\n//   console.log(\"バトルログを監視します。\");\n//   onValue(\n//     battleLogRef,\n//     (snapshot) => {\n//       const battleLogData = snapshot.val();\n//       if (battleLogData) {\n//         console.log(\"バトルログが更新されました。\");\n//         callback(battleLogData); // バトルログが更新されたらコールバックを実行\n//       } else {\n//         console.error(\"バトルログが存在しません。\");\n//       }\n//     },\n//     (error) => {\n//       console.error(\"バトルログの監視中にエラーが発生しました:\", error);\n//     }\n//   );\n// };\n// バトル終了を監視するリスナー\nexport const onBattleEnd=(roomId,callback)=>{const statusRef=ref(db,`rooms/${roomId}/status`);// バトルの終了を監視\nonValue(statusRef,snapshot=>{const status=snapshot.val();if(status===\"ended\"){callback();// バトルが終了したらコールバックを実行\n}});};//#endregion","map":{"version":3,"names":["ref","push","get","onValue","onChildAdded","off","auth","db","onRoomPlayersAdded","roomId","callback","roomRef","snapshot","PlayerData","val","console","error","stopOnRoomPlayers","log","onRoomUpdate","roomData","getRoomData","exists","sendMessage","message","user","currentUser","Error","messageRef","messageData","senderId","uid","timestamp","Date","now","https","onMessageAdded","messagesRef","newMessage","onBattleEnd","statusRef","status"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase-realtime-database.ts"],"sourcesContent":["import {\n  ref,\n  push,\n  get,\n  onValue,\n  remove,\n  child,\n  onChildAdded,\n  off,\n} from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\nimport { BattleLog, Message, PlayerData, RoomData } from \"shared/dist/types\";\n\n//#region HomeView\n// ルームのデータを監視\nexport const onRoomPlayersAdded = (\n  roomId: string,\n  callback: (players: PlayerData[] | null) => void\n) => {\n  const roomRef = ref(db, `rooms/${roomId}/players`);\n  onChildAdded(\n    roomRef,\n    (snapshot) => {\n      const PlayerData = snapshot.val() as PlayerData[] | null; // RoomData型にキャスト\n      if (PlayerData) {\n        callback(PlayerData); // データがある場合はコールバックを呼び出す\n      } else {\n        console.error(\"ルームが存在しません。\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n};\n\nexport const stopOnRoomPlayers = (roomId: string) => {\n  const roomRef = ref(db, `rooms/${roomId}/players`);\n  off(roomRef);\n  console.log(\"addPlayerの監視を停止しました。\");\n};\n\n// ルームのデータを監視\nexport const onRoomUpdate = (\n  roomId: string,\n  callback: (roomData: RoomData | null) => void\n) => {\n  const roomRef = ref(db, `rooms/${roomId}`);\n  onValue(\n    roomRef,\n    (snapshot) => {\n      const roomData = snapshot.val() as RoomData | null; // RoomData型にキャスト\n      if (roomData) {\n        callback(roomData); // データがある場合はコールバックを呼び出す\n      } else {\n        console.error(\"ルームが存在しません。\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n};\n\n// ルームデータを取得する関数\nexport const getRoomData = async (roomId: string): Promise<RoomData | null> => {\n  try {\n    const roomRef = ref(db, `rooms/${roomId}`);\n    const snapshot = await get(roomRef);\n\n    if (snapshot.exists()) {\n      const roomData = snapshot.val();\n      return roomData as RoomData; // RoomData型にキャストして返す\n    } else {\n      console.error(\"ルームが存在しません\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"ルームデータの取得に失敗しました:\", error);\n    return null;\n  }\n};\n//#endregion\n\n//#region BattleView\n// メッセージを送信する関数\nexport const sendMessage = async (roomId: string, message: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const messageRef = ref(db, `rooms/${roomId}/battleLog/messages`);\n  console.log(\"メッセージ:\", message);\n  const messageData: Message = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now(),\n  };\n  https: await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\");\n};\n\nexport const onMessageAdded = (\n  roomId: string,\n  callback: (data: any) => void\n) => {\n  // メッセージリストの参照\n  const messagesRef = ref(db, `rooms/${roomId}/battleLog/messages`);\n\n  // メッセージが追加されたときの監視\n  onChildAdded(messagesRef, (snapshot) => {\n    console.log(\"メッセージが追加されました。\");\n    const newMessage = snapshot.val();\n    callback(newMessage); // 新しいメッセージをコールバックで返す\n  });\n};\n\n// // バトルログの更新を監視するリスナー\n// export const onTurnUpdated = (\n//   roomId: string,\n//   callback: (battleLog: BattleLog) => void\n// ) => {\n//   const battleLogRef = ref(db, `rooms/${roomId}/battleLog/messages`);\n//   console.log(\"バトルログを監視します。\");\n//   onValue(\n//     battleLogRef,\n//     (snapshot) => {\n//       const battleLogData = snapshot.val();\n//       if (battleLogData) {\n//         console.log(\"バトルログが更新されました。\");\n//         callback(battleLogData); // バトルログが更新されたらコールバックを実行\n//       } else {\n//         console.error(\"バトルログが存在しません。\");\n//       }\n//     },\n//     (error) => {\n//       console.error(\"バトルログの監視中にエラーが発生しました:\", error);\n//     }\n//   );\n// };\n\n// バトル終了を監視するリスナー\nexport const onBattleEnd = (roomId: string, callback: () => void) => {\n  const statusRef = ref(db, `rooms/${roomId}/status`);\n\n  // バトルの終了を監視\n  onValue(statusRef, (snapshot) => {\n    const status = snapshot.val();\n    if (status === \"ended\") {\n      callback(); // バトルが終了したらコールバックを実行\n    }\n  });\n};\n//#endregion\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}