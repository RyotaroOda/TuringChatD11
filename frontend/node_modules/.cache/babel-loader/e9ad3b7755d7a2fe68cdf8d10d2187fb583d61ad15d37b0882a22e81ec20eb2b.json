{"ast":null,"code":"var _jsxFileName = \"/Users/ryotarooda/Desktop/\\u5352\\u8AD6/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/useAuth.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, createContext, useContext } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { auth } from \"./firebase_f.ts\"; // Firebase Authインスタンスをインポート\n\n// 認証コンテキストの作成\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null\n});\n\n// 認証状態を提供するプロバイダーコンポーネント\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // 認証状態の監視\n    const unsubscribe = onAuthStateChanged(auth, user => {\n      setUser(user); // ログインしているユーザー情報をセット\n      setLoading(false);\n    });\n\n    // クリーンアップ\n    return () => unsubscribe();\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 10\n  }, this);\n};\n\n// カスタムフック useAuth の実装\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext); // コンテキストから認証情報を取得\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","useState","useEffect","createContext","useContext","onAuthStateChanged","auth","jsxDEV","_jsxDEV","AuthContext","user","AuthProvider","children","_s","setUser","loading","setLoading","unsubscribe","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/useAuth.tsx"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext } from \"react\";\nimport { onAuthStateChanged, User } from \"firebase/auth\";\nimport { auth } from \"./firebase_f.ts\";  // Firebase Authインスタンスをインポート\n\n// 認証コンテキストの作成\nconst AuthContext = createContext<{ user: User | null }>({ user: null });\n\n// 認証状態を提供するプロバイダーコンポーネント\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // 認証状態の監視\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      setUser(user);  // ログインしているユーザー情報をセット\n      setLoading(false);\n    });\n\n    // クリーンアップ\n    return () => unsubscribe();\n  }, []);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return <AuthContext.Provider value={{ user }}>{children}</AuthContext.Provider>;\n};\n\n// カスタムフック useAuth の実装\nexport const useAuth = () => {\n  return useContext(AuthContext);  // コンテキストから認証情報を取得\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAC7E,SAASC,kBAAkB,QAAc,eAAe;AACxD,SAASC,IAAI,QAAQ,iBAAiB,CAAC,CAAE;;AAEzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGN,aAAa,CAAwB;EAAEO,IAAI,EAAE;AAAK,CAAC,CAAC;;AAExE;AACA,OAAO,MAAMC,YAAqD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrF,MAAM,CAACH,IAAI,EAAEI,OAAO,CAAC,GAAGb,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,WAAW,GAAGZ,kBAAkB,CAACC,IAAI,EAAGI,IAAI,IAAK;MACrDI,OAAO,CAACJ,IAAI,CAAC,CAAC,CAAE;MAChBM,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC;;IAEF;IACA,OAAO,MAAMC,WAAW,CAAC,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIF,OAAO,EAAE;IACX,oBAAOP,OAAA;MAAAI,QAAA,EAAK;IAAU;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9B;EAEA,oBAAOb,OAAA,CAACC,WAAW,CAACa,QAAQ;IAACC,KAAK,EAAE;MAAEb;IAAK,CAAE;IAAAE,QAAA,EAAEA;EAAQ;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAuB,CAAC;AACjF,CAAC;;AAED;AAAAR,EAAA,CAtBaF,YAAqD;AAAAa,EAAA,GAArDb,YAAqD;AAuBlE,OAAO,MAAMc,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAOtB,UAAU,CAACK,WAAW,CAAC,CAAC,CAAE;AACnC,CAAC;AAACiB,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}