{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{Link,useLocation,useParams}from\"react-router-dom\";import{sendMessage,onTurnUpdated,onBattleEnd}from\"../services/firebase-realtime-database.ts\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const BattleView=()=>{var _location$state,_location$state2,_location$state3,_location$state4,_location$state5;// State hooks\nconst[chatLog,setChatLog]=useState([]);const[message,setMessage]=useState(\"\");const[isMyTurn,setIsMyTurn]=useState(true);// Initial turn state (placeholder)\nconst[turnCount,setTurnCount]=useState(0);// Location and Params\nconst location=useLocation();const{roomId}=useParams();// Player Information\nconst myId=\"uniquePlayerId\";// TODO: Replace with actual ID generation/auth logic\nconst myName=(_location$state=location.state)!==null&&_location$state!==void 0&&_location$state.myData.playerName?`${location.state.myData.playerName} (あなた)`:\"error\";const opponentId=((_location$state2=location.state)===null||_location$state2===void 0?void 0:_location$state2.matchData.opponentId)||\"error\";const opponentName=((_location$state3=location.state)===null||_location$state3===void 0?void 0:_location$state3.matchData.opponentName)||\"error\";// Battle Configuration\nconst maxTurn=((_location$state4=location.state)===null||_location$state4===void 0?void 0:_location$state4.matchData.battleConfig.maxTurn)||10;const oneTurnTime=((_location$state5=location.state)===null||_location$state5===void 0?void 0:_location$state5.matchData.battleConfig.oneTurnTime)||60;// in seconds\nconst[remainingTime,setRemainingTime]=useState(oneTurnTime);// Player names mapping\nconst playerNames={[myId]:myName,[opponentId]:opponentName};// ゲームの進行状況を監視する\nuseEffect(()=>{if(roomId){// ターンの更新を監視\nonTurnUpdated(roomId,data=>{setIsMyTurn(data.battleLog.activePlayerId===myId);// 自分のターンかどうかを判定\nsetTurnCount(data.battleLog.currentTurn);// 新しいメッセージが追加されていれば、それをチャットログに追加\nconst newMessage=data.battleLog.messages[data.battleLog.currentTurn];if(newMessage){setChatLog(prevChatLog=>[...prevChatLog,{senderId:newMessage.senderId,message:newMessage.message}]);}});}},[roomId,myId]);// useEffect(() => {\n//   if (roomId) {\n//     // ターン更新をFirebaseから受け取る\n//     onTurnUpdated(roomId, (data: { battleLog: BattleLog }) => {\n//       setIsMyTurn(data.battleLog.activePlayerId === myId);\n//       setTurnCount(data.battleLog.currentTurn);\n//       const newMessage = data.battleLog.messages[data.battleLog.currentTurn];\n//       setChatLog((prevChatLog) => [\n//         ...prevChatLog,\n//         { senderId: newMessage.senderId, message: newMessage.message },\n//       ]);\n//       if (message === \"送信中...\") setMessage(\"\");\n//     });\n//   }\n// }, [roomId, myId, message]);\n// バトル終了の監視\nuseEffect(()=>{if(roomId){onBattleEnd(roomId,()=>{alert(\"Battle Ended!\");});}},[roomId]);const handleSendMessage=async()=>{if(message.trim()&&isMyTurn&&roomId){await sendMessage(roomId,message);setMessage(\"送信中...\");setIsMyTurn(false);}};const handleFinishMatching=()=>{console.log(\"Finishing battle...\");// バトル終了のロジック\n};//html\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"\\u5BFE\\u6226\\u753B\\u9762\"}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u30EB\\u30FC\\u30E0ID: \",roomId]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\u30C1\\u30E3\\u30C3\\u30C8\\u30ED\\u30B0\"}),/*#__PURE__*/_jsx(\"ul\",{children:chatLog.map((msg,index)=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[playerNames[msg.senderId]||\"Unknown\",\":\"]}),\" \",msg.message]},index))})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u6B8B\\u308A\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8\\u6570: \",maxTurn-turnCount]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u3053\\u306E\\u30BF\\u30FC\\u30F3\\u306E\\u6B8B\\u308A\\u6642\\u9593: \",remainingTime,\"\\u79D2\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u30BF\\u30FC\\u30F3\\u30D7\\u30EC\\u30FC\\u30E4\\u30FC: \",isMyTurn?\"あなた\":\"相手\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"\\u76F8\\u624B\\u306E\\u30D7\\u30EC\\u30A4\\u30E4\\u30FC\\u30CD\\u30FC\\u30E0: \",opponentName]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"label\",{children:[\"\\u30E1\\u30C3\\u30BB\\u30FC\\u30B8:\",/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Enter message\",value:message,onChange:e=>setMessage(e.target.value)})]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSendMessage,disabled:!isMyTurn,children:isMyTurn?\"送信\":\"Wait for your turn\"})]}),/*#__PURE__*/_jsx(Link,{to:\"/result\",children:/*#__PURE__*/_jsx(\"button\",{onClick:handleFinishMatching,children:\"\\u30D0\\u30C8\\u30EB\\u7D42\\u4E86\"})})]});};export default BattleView;","map":{"version":3,"names":["React","useState","useEffect","Link","useLocation","useParams","sendMessage","onTurnUpdated","onBattleEnd","jsx","_jsx","jsxs","_jsxs","BattleView","_location$state","_location$state2","_location$state3","_location$state4","_location$state5","chatLog","setChatLog","message","setMessage","isMyTurn","setIsMyTurn","turnCount","setTurnCount","location","roomId","myId","myName","state","myData","playerName","opponentId","matchData","opponentName","maxTurn","battleConfig","oneTurnTime","remainingTime","setRemainingTime","playerNames","data","battleLog","activePlayerId","currentTurn","newMessage","messages","prevChatLog","senderId","alert","handleSendMessage","trim","handleFinishMatching","console","log","children","map","msg","index","type","placeholder","value","onChange","e","target","onClick","disabled","to"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/views/BattleView.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useLocation, useParams } from \"react-router-dom\";\nimport {\n  sendMessage,\n  onTurnUpdated,\n  onBattleEnd,\n} from \"../services/firebase-realtime-database.ts\";\nimport { BattleLog } from \"../shared/types.ts\";\n\nconst BattleView: React.FC = () => {\n  // State hooks\n  const [chatLog, setChatLog] = useState<\n    { senderId: string; message: string }[]\n  >([]);\n  const [message, setMessage] = useState<string>(\"\");\n  const [isMyTurn, setIsMyTurn] = useState<boolean>(true); // Initial turn state (placeholder)\n  const [turnCount, setTurnCount] = useState<number>(0);\n\n  // Location and Params\n  const location = useLocation();\n  const { roomId } = useParams<{ roomId: string }>();\n\n  // Player Information\n  const myId = \"uniquePlayerId\"; // TODO: Replace with actual ID generation/auth logic\n  const myName = location.state?.myData.playerName\n    ? `${location.state.myData.playerName} (あなた)`\n    : \"error\";\n\n  const opponentId = location.state?.matchData.opponentId || \"error\";\n  const opponentName = location.state?.matchData.opponentName || \"error\";\n\n  // Battle Configuration\n  const maxTurn = location.state?.matchData.battleConfig.maxTurn || 10;\n  const oneTurnTime = location.state?.matchData.battleConfig.oneTurnTime || 60; // in seconds\n  const [remainingTime, setRemainingTime] = useState<number>(oneTurnTime);\n\n  // Player names mapping\n  const playerNames: Record<string, string> = {\n    [myId]: myName,\n    [opponentId]: opponentName,\n  };\n\n  // ゲームの進行状況を監視する\n  useEffect(() => {\n    if (roomId) {\n      // ターンの更新を監視\n      onTurnUpdated(roomId, (data: { battleLog: BattleLog }) => {\n        setIsMyTurn(data.battleLog.activePlayerId === myId); // 自分のターンかどうかを判定\n        setTurnCount(data.battleLog.currentTurn);\n\n        // 新しいメッセージが追加されていれば、それをチャットログに追加\n        const newMessage = data.battleLog.messages[data.battleLog.currentTurn];\n        if (newMessage) {\n          setChatLog((prevChatLog) => [\n            ...prevChatLog,\n            { senderId: newMessage.senderId, message: newMessage.message },\n          ]);\n        }\n      });\n    }\n  }, [roomId, myId]);\n\n  // useEffect(() => {\n  //   if (roomId) {\n  //     // ターン更新をFirebaseから受け取る\n  //     onTurnUpdated(roomId, (data: { battleLog: BattleLog }) => {\n  //       setIsMyTurn(data.battleLog.activePlayerId === myId);\n  //       setTurnCount(data.battleLog.currentTurn);\n\n  //       const newMessage = data.battleLog.messages[data.battleLog.currentTurn];\n  //       setChatLog((prevChatLog) => [\n  //         ...prevChatLog,\n  //         { senderId: newMessage.senderId, message: newMessage.message },\n  //       ]);\n  //       if (message === \"送信中...\") setMessage(\"\");\n  //     });\n  //   }\n  // }, [roomId, myId, message]);\n\n  // バトル終了の監視\n  useEffect(() => {\n    if (roomId) {\n      onBattleEnd(roomId, () => {\n        alert(\"Battle Ended!\");\n      });\n    }\n  }, [roomId]);\n\n  const handleSendMessage = async () => {\n    if (message.trim() && isMyTurn && roomId) {\n      await sendMessage(roomId, message);\n      setMessage(\"送信中...\");\n      setIsMyTurn(false);\n    }\n  };\n\n  const handleFinishMatching = () => {\n    console.log(\"Finishing battle...\");\n    // バトル終了のロジック\n  };\n\n  //html\n  return (\n    <div>\n      <h1>対戦画面</h1>\n      <p>ルームID: {roomId}</p>\n      <div>\n        <h2>チャットログ</h2>\n        <ul>\n          {chatLog.map((msg, index) => (\n            <li key={index}>\n              <strong>{playerNames[msg.senderId] || \"Unknown\"}:</strong>{\" \"}\n              {msg.message}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <p>残りメッセージ数: {maxTurn - turnCount}</p>\n      <p>このターンの残り時間: {remainingTime}秒</p>\n      <p>ターンプレーヤー: {isMyTurn ? \"あなた\" : \"相手\"}</p>\n      <p>相手のプレイヤーネーム: {opponentName}</p>\n      <div>\n        <label>\n          メッセージ:\n          <input\n            type=\"text\"\n            placeholder=\"Enter message\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n          />\n        </label>\n        <button onClick={handleSendMessage} disabled={!isMyTurn}>\n          {isMyTurn ? \"送信\" : \"Wait for your turn\"}\n        </button>\n      </div>\n      <Link to=\"/result\">\n        <button onClick={handleFinishMatching}>バトル終了</button>\n      </Link>\n    </div>\n  );\n};\n\nexport default BattleView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}