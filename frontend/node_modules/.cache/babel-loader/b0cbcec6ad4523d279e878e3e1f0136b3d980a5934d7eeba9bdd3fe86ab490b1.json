{"ast":null,"code":"import { ref, push, get, onValue, onChildAdded, off } from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\n\n//#region HomeView\n// ルームのデータを監視\nexport const onRoomPlayersAdded = (roomId, callback, stop) => {\n  const roomRef = ref(db, `rooms/${roomId}/players`);\n  onChildAdded(roomRef, snapshot => {\n    const PlayerData = snapshot.val(); // RoomData型にキャスト\n    if (PlayerData) {\n      callback(PlayerData); // データがある場合はコールバックを呼び出す\n    } else {\n      console.error(\"ルームが存在しません。\");\n      callback(null);\n    }\n  }, error => {\n    console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n    callback(null);\n  });\n  const stopListening = () => {\n    off(roomRef);\n    console.log(\"addPlayerの監視を停止しました。\");\n  };\n  return stopListening;\n};\nexport const stopOnRoomPlayers = roomId => {\n  const roomRef = ref(db, `rooms/${roomId}/players`);\n  off(roomRef);\n  console.log(\"addPlayerの監視を停止しました。\");\n};\n\n// ルームのデータを監視\nexport const onRoomUpdate = (roomId, callback) => {\n  const roomRef = ref(db, `rooms/${roomId}`);\n  onValue(roomRef, snapshot => {\n    const roomData = snapshot.val(); // RoomData型にキャスト\n    if (roomData) {\n      callback(roomData); // データがある場合はコールバックを呼び出す\n    } else {\n      console.error(\"ルームが存在しません。\");\n      callback(null);\n    }\n  }, error => {\n    console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n    callback(null);\n  });\n};\n\n// ルームデータを取得する関数\nexport const getRoomData = async roomId => {\n  try {\n    const roomRef = ref(db, `rooms/${roomId}`);\n    const snapshot = await get(roomRef);\n    if (snapshot.exists()) {\n      const roomData = snapshot.val();\n      return roomData; // RoomData型にキャストして返す\n    } else {\n      console.error(\"ルームが存在しません\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"ルームデータの取得に失敗しました:\", error);\n    return null;\n  }\n};\n//#endregion\n\n//#region BattleView\n// メッセージを送信する関数\nexport const sendMessage = async (roomId, message) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const messageRef = ref(db, `rooms/${roomId}/battleLog/messages`);\n  console.log(\"メッセージ:\", message);\n  const messageData = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now()\n  };\n  https: await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\");\n};\nexport const onMessageAdded = (roomId, callback) => {\n  // メッセージリストの参照\n  const messagesRef = ref(db, `rooms/${roomId}/battleLog/messages`);\n\n  // メッセージが追加されたときの監視\n  onChildAdded(messagesRef, snapshot => {\n    console.log(\"メッセージが追加されました。\");\n    const newMessage = snapshot.val();\n    callback(newMessage); // 新しいメッセージをコールバックで返す\n  });\n};\n\n// // バトルログの更新を監視するリスナー\n// export const onTurnUpdated = (\n//   roomId: string,\n//   callback: (battleLog: BattleLog) => void\n// ) => {\n//   const battleLogRef = ref(db, `rooms/${roomId}/battleLog/messages`);\n//   console.log(\"バトルログを監視します。\");\n//   onValue(\n//     battleLogRef,\n//     (snapshot) => {\n//       const battleLogData = snapshot.val();\n//       if (battleLogData) {\n//         console.log(\"バトルログが更新されました。\");\n//         callback(battleLogData); // バトルログが更新されたらコールバックを実行\n//       } else {\n//         console.error(\"バトルログが存在しません。\");\n//       }\n//     },\n//     (error) => {\n//       console.error(\"バトルログの監視中にエラーが発生しました:\", error);\n//     }\n//   );\n// };\n\n// バトル終了を監視するリスナー\nexport const onBattleEnd = (roomId, callback) => {\n  const statusRef = ref(db, `rooms/${roomId}/status`);\n\n  // バトルの終了を監視\n  onValue(statusRef, snapshot => {\n    const status = snapshot.val();\n    if (status === \"ended\") {\n      callback(); // バトルが終了したらコールバックを実行\n    }\n  });\n};\n//#endregion","map":{"version":3,"names":["ref","push","get","onValue","onChildAdded","off","auth","db","onRoomPlayersAdded","roomId","callback","stop","roomRef","snapshot","PlayerData","val","console","error","stopListening","log","stopOnRoomPlayers","onRoomUpdate","roomData","getRoomData","exists","sendMessage","message","user","currentUser","Error","messageRef","messageData","senderId","uid","timestamp","Date","now","https","onMessageAdded","messagesRef","newMessage","onBattleEnd","statusRef","status"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase-realtime-database.ts"],"sourcesContent":["import {\n  ref,\n  push,\n  get,\n  onValue,\n  remove,\n  child,\n  onChildAdded,\n  off,\n} from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\nimport { BattleLog, Message, PlayerData, RoomData } from \"shared/dist/types\";\n\n//#region HomeView\n// ルームのデータを監視\nexport const onRoomPlayersAdded = (\n  roomId: string,\n  callback: (players: PlayerData[] | null) => void,\n  stop: { current: boolean }\n) => {\n  const roomRef = ref(db, `rooms/${roomId}/players`);\n  onChildAdded(\n    roomRef,\n    (snapshot) => {\n      const PlayerData = snapshot.val() as PlayerData[] | null; // RoomData型にキャスト\n      if (PlayerData) {\n        callback(PlayerData); // データがある場合はコールバックを呼び出す\n      } else {\n        console.error(\"ルームが存在しません。\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n  const stopListening = () => {\n    off(roomRef);\n    console.log(\"addPlayerの監視を停止しました。\");\n  };\n  return stopListening;\n};\n\nexport const stopOnRoomPlayers = (roomId: string) => {\n  const roomRef = ref(db, `rooms/${roomId}/players`);\n  off(roomRef);\n  console.log(\"addPlayerの監視を停止しました。\");\n};\n\n// ルームのデータを監視\nexport const onRoomUpdate = (\n  roomId: string,\n  callback: (roomData: RoomData | null) => void\n) => {\n  const roomRef = ref(db, `rooms/${roomId}`);\n  onValue(\n    roomRef,\n    (snapshot) => {\n      const roomData = snapshot.val() as RoomData | null; // RoomData型にキャスト\n      if (roomData) {\n        callback(roomData); // データがある場合はコールバックを呼び出す\n      } else {\n        console.error(\"ルームが存在しません。\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n};\n\n// ルームデータを取得する関数\nexport const getRoomData = async (roomId: string): Promise<RoomData | null> => {\n  try {\n    const roomRef = ref(db, `rooms/${roomId}`);\n    const snapshot = await get(roomRef);\n\n    if (snapshot.exists()) {\n      const roomData = snapshot.val();\n      return roomData as RoomData; // RoomData型にキャストして返す\n    } else {\n      console.error(\"ルームが存在しません\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"ルームデータの取得に失敗しました:\", error);\n    return null;\n  }\n};\n//#endregion\n\n//#region BattleView\n// メッセージを送信する関数\nexport const sendMessage = async (roomId: string, message: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const messageRef = ref(db, `rooms/${roomId}/battleLog/messages`);\n  console.log(\"メッセージ:\", message);\n  const messageData: Message = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now(),\n  };\n  https: await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\");\n};\n\nexport const onMessageAdded = (\n  roomId: string,\n  callback: (data: any) => void\n) => {\n  // メッセージリストの参照\n  const messagesRef = ref(db, `rooms/${roomId}/battleLog/messages`);\n\n  // メッセージが追加されたときの監視\n  onChildAdded(messagesRef, (snapshot) => {\n    console.log(\"メッセージが追加されました。\");\n    const newMessage = snapshot.val();\n    callback(newMessage); // 新しいメッセージをコールバックで返す\n  });\n};\n\n// // バトルログの更新を監視するリスナー\n// export const onTurnUpdated = (\n//   roomId: string,\n//   callback: (battleLog: BattleLog) => void\n// ) => {\n//   const battleLogRef = ref(db, `rooms/${roomId}/battleLog/messages`);\n//   console.log(\"バトルログを監視します。\");\n//   onValue(\n//     battleLogRef,\n//     (snapshot) => {\n//       const battleLogData = snapshot.val();\n//       if (battleLogData) {\n//         console.log(\"バトルログが更新されました。\");\n//         callback(battleLogData); // バトルログが更新されたらコールバックを実行\n//       } else {\n//         console.error(\"バトルログが存在しません。\");\n//       }\n//     },\n//     (error) => {\n//       console.error(\"バトルログの監視中にエラーが発生しました:\", error);\n//     }\n//   );\n// };\n\n// バトル終了を監視するリスナー\nexport const onBattleEnd = (roomId: string, callback: () => void) => {\n  const statusRef = ref(db, `rooms/${roomId}/status`);\n\n  // バトルの終了を監視\n  onValue(statusRef, (snapshot) => {\n    const status = snapshot.val();\n    if (status === \"ended\") {\n      callback(); // バトルが終了したらコールバックを実行\n    }\n  });\n};\n//#endregion\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}