{"ast":null,"code":"import { ref, push, get, onValue, onChildAdded, off } from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\n\nimport { calculateBattleResult } from \"./firebase-functions-client.ts\";\n//#region HomeView\n// プレイヤーデータを監視\nexport const onRoomPlayersUpdated = (roomId, callback, stop) => {\n  const roomRef = ref(db, `rooms/${roomId}/players`);\n  const listener = onValue(roomRef, snapshot => {\n    if (stop.current) {\n      // `stop` が `true` の場合、リスナーを解除して終了\n      off(roomRef, \"value\", listener);\n      console.log(\"リスナーが解除されました\");\n      return;\n    }\n    const PlayerData = snapshot.val(); // RoomData型にキャスト\n    if (PlayerData) {\n      console.log(\"プレイヤーデータが更新されました。\", PlayerData);\n      callback(PlayerData); // データがある場合はコールバックを呼び出す\n    } else {\n      console.error(\"ルームが存在しません。\");\n      callback(null);\n    }\n  }, error => {\n    console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n    callback(null);\n  });\n  return () => {\n    console.log(\"off onRoomPlayersUpdated\");\n    off(roomRef, \"value\", listener);\n  };\n};\n\n// export const stopOnRoomPlayers = (roomId: string) => {\n//   const roomRef = ref(db, `rooms/${roomId}/players`);\n//   off(roomRef);\n//   console.log(\"addPlayerの監視を停止しました。\");\n// };\n\n// ルームのデータを監視\nexport const onRoomUpdate = (roomId, callback, stop) => {\n  const roomRef = ref(db, `rooms/${roomId}`);\n  const listener = onValue(roomRef, snapshot => {\n    if (stop.current) {\n      off(roomRef, \"value\", listener);\n      console.log(\"リスナーが解除されました111\");\n      return;\n    }\n    const roomData = snapshot.val(); // RoomData型にキャスト\n    if (roomData) {\n      console.log(\"ルームデータが更新されました。\", roomData);\n      callback(roomData); // データがある場合はコールバックを呼び出す\n    } else {\n      console.error(\"ルームが存在しません。\");\n      callback(null);\n    }\n  }, error => {\n    console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n    callback(null);\n  });\n  return () => {\n    console.log(\"リスナーが解除されました222\");\n    off(roomRef, \"value\", listener);\n  };\n};\n\n// ルームデータを取得する関数\nexport const getRoomData = async roomId => {\n  try {\n    const roomRef = ref(db, `rooms/${roomId}`);\n    const snapshot = await get(roomRef);\n    if (snapshot.exists()) {\n      const roomData = snapshot.val();\n      console.log(\"ルームデータを取得しました:\", roomData);\n      return roomData; // RoomData型にキャストして返す\n    } else {\n      console.error(\"ルームが存在しません\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"ルームデータの取得に失敗しました:\", error);\n    return null;\n  }\n};\n//#endregion\n\n//#region BattleView\n\n//#region メッセージ\n// メッセージを送信する関数\nexport const sendMessage = async (roomId, message) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const messageRef = ref(db, `rooms/${roomId}/battleLog/messages`);\n  console.log(\"メッセージ:\", message);\n  const messageData = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now()\n  };\n  https: await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\", messageData);\n};\nexport const onMessageAdded = (roomId, callback) => {\n  // メッセージリストの参照\n  const messagesRef = ref(db, `rooms/${roomId}/battleLog/messages`);\n\n  // メッセージが追加されたときの監視\n  onChildAdded(messagesRef, snapshot => {\n    const newMessage = snapshot.val();\n    console.log(\"メッセージが追加されました。\", newMessage);\n    callback(newMessage); // 新しいメッセージをコールバックで返す\n  });\n};\n\n//#endregion\n\n//#region バトル終了時\n// 回答を送信する関数\nexport const sendAnswer = async (roomId, answer) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  const answerRef = ref(db, `rooms/${roomId}/battleLog/submittedAnswers`);\n  await push(answerRef, answer);\n  console.log(\"回答を送信しました。\", answer);\n};\n\n// 両プレイヤーの回答が揃ったらサーバーレス関数でスコア計算する\nexport const checkAnswers = roomId => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  // メッセージリストの参照\n  const answerRef = ref(db, `rooms/${roomId}/battleLog/submittedAnswers`);\n  // 両プレイヤーの選択が揃ったか確認\n  get(answerRef).then(answersSnapshot => {\n    if (Object.keys(answersSnapshot.val()).length == 2) {\n      console.log(\"両プレイヤーの回答が揃いました。\");\n      calculateBattleResult(answerRef);\n    } else {\n      // 要素数が2未満の場合、リスナーを設定して監視\n      onValue(answerRef, snapshot => {\n        const updatedData = snapshot.val();\n        const updatedCount = updatedData ? Object.keys(updatedData).length : 0;\n\n        // 2つになったタイミングで `func()` を実行し、リスナーを解除\n        if (updatedCount >= 2) {\n          calculateBattleResult(answerRef);\n          off(answerRef); // リスナーを解除\n          console.log(\"off checkAnswers\");\n        }\n      });\n    }\n  }).catch(error => {\n    console.error(\"回答の確認中にエラーが発生しました:\", error);\n  });\n};\n\n//resultが返ってきたらバトル終了\nexport const onResultUpdated = (roomId, callback) => {\n  const resultRef = ref(db, `rooms/${roomId}/battleLog/result`);\n  const listener = onChildAdded(resultRef, snapshot => {\n    const serverData = snapshot.val(); // RoomData型にキャスト\n    if (serverData) {\n      // データがある場合\n      //TODO: データを整形して返す\n    } else {\n      console.error(\"ルームが存在しません。\");\n      callback(null);\n    }\n  }, error => {\n    console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n    callback(null);\n  });\n  return () => {\n    console.log(\"off onResultUpdated\");\n    off(resultRef, \"value\", listener);\n  };\n};\n\n// バトル終了を監視するリスナー\n// export const onBattleEnd = (roomId: string, callback: () => void) => {\n//   const statusRef = ref(db, `rooms/${roomId}/status`);\n\n//   // バトルの終了を監視\n//   onValue(statusRef, (snapshot) => {\n//     const status = snapshot.val();\n//     if (status === \"ended\") {\n//       callback(); // バトルが終了したらコールバックを実行\n//     }\n//   });\n// };\n//#endregion","map":{"version":3,"names":["ref","push","get","onValue","onChildAdded","off","auth","db","calculateBattleResult","onRoomPlayersUpdated","roomId","callback","stop","roomRef","listener","snapshot","current","console","log","PlayerData","val","error","onRoomUpdate","roomData","getRoomData","exists","sendMessage","message","user","currentUser","Error","messageRef","messageData","senderId","uid","timestamp","Date","now","https","onMessageAdded","messagesRef","newMessage","sendAnswer","answer","answerRef","checkAnswers","then","answersSnapshot","Object","keys","length","updatedData","updatedCount","catch","onResultUpdated","resultRef","serverData"],"sources":["/Users/ryotarooda/Desktop/卒論/TuringChats/turing-chat-d/turing-chat-d11/frontend/src/services/firebase-realtime-database.ts"],"sourcesContent":["import {\n  ref,\n  push,\n  get,\n  onValue,\n  remove,\n  child,\n  onChildAdded,\n  off,\n} from \"firebase/database\";\nimport { auth } from \"./firebase_f.ts\"; // Firebaseの認証インスタンスをインポート\nimport { db } from \"./firebase_f.ts\"; // Firebase初期化ファイルからデータベースをインポート\nimport {\n  BattleLog,\n  BattleResult,\n  Message,\n  PlayerData,\n  ResultData,\n  RoomData,\n  SubmitAnswer,\n} from \"shared/dist/types\";\nimport { calculateBattleResult } from \"./firebase-functions-client.ts\";\n//#region HomeView\n// プレイヤーデータを監視\nexport const onRoomPlayersUpdated = (\n  roomId: string,\n  callback: (players: PlayerData[] | null) => void,\n  stop: { current: boolean }\n) => {\n  const roomRef = ref(db, `rooms/${roomId}/players`);\n  const listener = onValue(\n    roomRef,\n    (snapshot) => {\n      if (stop.current) {\n        // `stop` が `true` の場合、リスナーを解除して終了\n        off(roomRef, \"value\", listener);\n        console.log(\"リスナーが解除されました\");\n        return;\n      }\n      const PlayerData = snapshot.val() as PlayerData[] | null; // RoomData型にキャスト\n      if (PlayerData) {\n        console.log(\"プレイヤーデータが更新されました。\", PlayerData);\n        callback(PlayerData); // データがある場合はコールバックを呼び出す\n      } else {\n        console.error(\"ルームが存在しません。\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n\n  return () => {\n    console.log(\"off onRoomPlayersUpdated\");\n    off(roomRef, \"value\", listener);\n  };\n};\n\n// export const stopOnRoomPlayers = (roomId: string) => {\n//   const roomRef = ref(db, `rooms/${roomId}/players`);\n//   off(roomRef);\n//   console.log(\"addPlayerの監視を停止しました。\");\n// };\n\n// ルームのデータを監視\nexport const onRoomUpdate = (\n  roomId: string,\n  callback: (roomData: RoomData | null) => void,\n  stop: { current: boolean }\n) => {\n  const roomRef = ref(db, `rooms/${roomId}`);\n  const listener = onValue(\n    roomRef,\n    (snapshot) => {\n      if (stop.current) {\n        off(roomRef, \"value\", listener);\n        console.log(\"リスナーが解除されました111\");\n        return;\n      }\n      const roomData = snapshot.val() as RoomData | null; // RoomData型にキャスト\n      if (roomData) {\n        console.log(\"ルームデータが更新されました。\", roomData);\n        callback(roomData); // データがある場合はコールバックを呼び出す\n      } else {\n        console.error(\"ルームが存在しません。\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n  return () => {\n    console.log(\"リスナーが解除されました222\");\n    off(roomRef, \"value\", listener);\n  };\n};\n\n// ルームデータを取得する関数\nexport const getRoomData = async (roomId: string): Promise<RoomData | null> => {\n  try {\n    const roomRef = ref(db, `rooms/${roomId}`);\n    const snapshot = await get(roomRef);\n\n    if (snapshot.exists()) {\n      const roomData = snapshot.val();\n      console.log(\"ルームデータを取得しました:\", roomData);\n      return roomData as RoomData; // RoomData型にキャストして返す\n    } else {\n      console.error(\"ルームが存在しません\");\n      return null;\n    }\n  } catch (error) {\n    console.error(\"ルームデータの取得に失敗しました:\", error);\n    return null;\n  }\n};\n//#endregion\n\n//#region BattleView\n\n//#region メッセージ\n// メッセージを送信する関数\nexport const sendMessage = async (roomId: string, message: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const messageRef = ref(db, `rooms/${roomId}/battleLog/messages`);\n  console.log(\"メッセージ:\", message);\n  const messageData: Message = {\n    senderId: user.uid,\n    message,\n    timestamp: Date.now(),\n  };\n  https: await push(messageRef, messageData);\n  console.log(\"メッセージを送信しました。\", messageData);\n};\n\nexport const onMessageAdded = (\n  roomId: string,\n  callback: (data: any) => void\n) => {\n  // メッセージリストの参照\n  const messagesRef = ref(db, `rooms/${roomId}/battleLog/messages`);\n\n  // メッセージが追加されたときの監視\n  onChildAdded(messagesRef, (snapshot) => {\n    const newMessage = snapshot.val();\n    console.log(\"メッセージが追加されました。\", newMessage);\n    callback(newMessage); // 新しいメッセージをコールバックで返す\n  });\n};\n\n//#endregion\n\n//#region バトル終了時\n// 回答を送信する関数\nexport const sendAnswer = async (roomId: string, answer: SubmitAnswer) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n\n  const answerRef = ref(db, `rooms/${roomId}/battleLog/submittedAnswers`);\n  await push(answerRef, answer);\n  console.log(\"回答を送信しました。\", answer);\n};\n\n// 両プレイヤーの回答が揃ったらサーバーレス関数でスコア計算する\nexport const checkAnswers = (roomId: string) => {\n  const user = auth.currentUser;\n  if (!user) {\n    throw new Error(\"ログインしていないユーザーです。\");\n  }\n  // メッセージリストの参照\n  const answerRef = ref(db, `rooms/${roomId}/battleLog/submittedAnswers`);\n  // 両プレイヤーの選択が揃ったか確認\n  get(answerRef)\n    .then((answersSnapshot) => {\n      if (Object.keys(answersSnapshot.val()).length == 2) {\n        console.log(\"両プレイヤーの回答が揃いました。\");\n        calculateBattleResult(answerRef);\n      } else {\n        // 要素数が2未満の場合、リスナーを設定して監視\n        onValue(answerRef, (snapshot) => {\n          const updatedData = snapshot.val();\n          const updatedCount = updatedData\n            ? Object.keys(updatedData).length\n            : 0;\n\n          // 2つになったタイミングで `func()` を実行し、リスナーを解除\n          if (updatedCount >= 2) {\n            calculateBattleResult(answerRef);\n            off(answerRef); // リスナーを解除\n            console.log(\"off checkAnswers\");\n          }\n        });\n      }\n    })\n    .catch((error) => {\n      console.error(\"回答の確認中にエラーが発生しました:\", error);\n    });\n};\n\n//resultが返ってきたらバトル終了\nexport const onResultUpdated = (\n  roomId: string,\n  callback: (players: ResultData[] | null) => void\n) => {\n  const resultRef = ref(db, `rooms/${roomId}/battleLog/result`);\n  const listener = onChildAdded(\n    resultRef,\n    (snapshot) => {\n      const serverData = snapshot.val() as BattleResult; // RoomData型にキャスト\n      if (serverData) {\n        // データがある場合\n        //TODO: データを整形して返す\n      } else {\n        console.error(\"ルームが存在しません。\");\n        callback(null);\n      }\n    },\n    (error) => {\n      console.error(\"ルームデータの監視中にエラーが発生しました:\", error);\n      callback(null);\n    }\n  );\n  return () => {\n    console.log(\"off onResultUpdated\");\n    off(resultRef, \"value\", listener);\n  };\n};\n\n// バトル終了を監視するリスナー\n// export const onBattleEnd = (roomId: string, callback: () => void) => {\n//   const statusRef = ref(db, `rooms/${roomId}/status`);\n\n//   // バトルの終了を監視\n//   onValue(statusRef, (snapshot) => {\n//     const status = snapshot.val();\n//     if (status === \"ended\") {\n//       callback(); // バトルが終了したらコールバックを実行\n//     }\n//   });\n// };\n//#endregion\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}